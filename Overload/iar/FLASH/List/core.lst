###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.2.14835/W32 for ARM       09/Jun/2018  07:35:31
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\app\core.c
#    Command line =  
#        -f C:\Users\JoyC\AppData\Local\Temp\EWD910.tmp
#        (D:\workspace\LPLD_OSKinetis_V3\project\Overload3\app\core.c -D
#        LPLD_K60 -D USE_K60DZ10 -lCN
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\List -lB
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\List -o
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "D:\Program Files\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\app\ -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\CPU\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\common\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\HW\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\FatFs\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\FatFs\option\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\common\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\driver\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\descriptor\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\class\
#        -Om -I "D:\Program Files\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\List\core.lst
#    Object file  =  
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\Obj\core.o
#
###############################################################################

D:\workspace\LPLD_OSKinetis_V3\project\Overload3\app\core.c
      1          #include "include.h"
      2          

   \                                 In section .bss, align 1
      3          uint8 should_send=0;
   \                     should_send:
   \   00000000                      DS8 1
      4          

   \                                 In section .text, align 2, keep-with-next
      5          void Img_Handler(void)
      6          {
   \                     Img_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      7            Show_Img();
   \   00000002   0x.... 0x....      BL       Show_Img
      8            if(should_send==1)Show_Num();
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable17
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD102             BNE.N    ??Img_Handler_0
   \   00000010   0xE8BD 0x4001      POP      {R0,LR}
   \   00000014   0x....             B.N      Show_Num
      9          }
   \                     ??Img_Handler_0: (+1)
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
     10          
     11          int YUZHI=120;
     12          void Error_count0();
     13          void Error_count1();
     14          void Error_count2();
     15          void Error_count3();
     16          void check_right_bound();
     17          void check_left_bound();

   \                                 In section .bss, align 4
     18          int Left_Bound[51] = {0};
   \                     Left_Bound:
   \   00000000                      DS8 204

   \                                 In section .bss, align 4
     19          int Right_Bound[51] = {0};
   \                     Right_Bound:
   \   00000000                      DS8 204
     20          int Error = 0;
     21          int Error_Last = 0;
     22          int MID_LINE=H/2;

   \                                 In section .bss, align 4
     23          int right_index=0;
   \                     right_index:
   \   00000000                      DS8 4
     24          int left_index=0;
   \                     left_index:
   \   00000004                      DS8 4

   \                                 In section .bss, align 4
     25          int right_bottom_index=0;
   \                     right_bottom_index:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          int left_bottom_index=0;
   \                     left_bottom_index:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     27          int lft01_index=0;
   \                     lft01_index:
   \   00000000                      DS8 4
     28          uint8 count=0;
     29          uint8 LEFT_Flag = 1;
     30          uint8 RIGHT_Flag = 1;

   \                                 In section .bss, align 4
     31          int Error_Hang[51]={0}; //@@@@@
   \                     Error_Hang:
   \   00000000                      DS8 204
     32          int16 Mid_Bound[51]={0}; //@@@@@
     33          uint8 No_Bound=0;
     34          uint8 road_type=0;

   \                                 In section .bss, align 4
     35          int has_right_bound=0;
   \                     has_right_bound:
   \   00000000                      DS8 4
     36          int i,j;

   \                                 In section .bss, align 4
     37          int point,point_max;
   \                     point:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     point_max:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     count:
   \   00000000   0x00               DC8 0
   \                     road_type:
   \   00000001   0x00               DC8 0
     38          /*************************************************************************
     39          * @@@@@Get_Bound_Qian
     40          * @@@@@@@@@@@
     41          * @@@@@value_hang  @@@
     42          * @@@@@Error       @@
     43          *************************************************************************/
     44          uint8 scan_hang=50;
     45          uint8 value_hang=70; 
     46          uint8 should_stop=0;
   \                     should_stop:
   \   00000002   0x00               DC8 0
     47          uint8 stop_line_count=0;
   \                     stop_line_count:
   \   00000003   0x00               DC8 0
   \                     Mid_Bound:
   \   00000004   0x0000             DC16 0
   \   00000006   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000026   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000036   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000046   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000056   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     YUZHI:
   \   0000006C   0x00000078         DC32 120
   \                     Error:
   \   00000070   0x00000000         DC32 0
   \                     Error_Last:
   \   00000074   0x00000000         DC32 0
   \                     MID_LINE:
   \   00000078   0x0000009E         DC32 158
   \                     i:
   \   0000007C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     LEFT_Flag:
   \   00000000   0x01               DC8 1
   \                     RIGHT_Flag:
   \   00000001   0x01               DC8 1
   \                     No_Bound:
   \   00000002   0x00               DC8 0
   \                     scan_hang:
   \   00000003   0x32               DC8 50
   \                     value_hang:
   \   00000004   0x46               DC8 70
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \                     j:
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
     48          #define stop_row 70

   \                                 In section .text, align 2, keep-with-next
     49          void Check_Stop_Line(void)
     50          {
   \                     Check_Stop_Line: (+1)
   \   00000000   0xB438             PUSH     {R3-R5}
     51            //@@@@@
     52            int up_dpwn_count=0;
   \   00000002   0x2100             MOVS     R1,#+0
     53            for(i=H/2;i>10;i--)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   00000008   0x229E             MOVS     R2,#+158
   \   0000000A   0x67C2             STR      R2,[R0, #+124]
   \   0000000C   0xE017             B.N      ??Check_Stop_Line_0
     54            {
     55              //@@@@
     56              if(Img_Data[stop_row][i+1]>YUZHI&&Img_Data[stop_row][i]>YUZHI && Img_Data[stop_row][i-1]<YUZHI && Img_Data[stop_row][i-2]<YUZHI)
   \                     ??Check_Stop_Line_1: (+1)
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable17_2
   \   00000012   0x4413             ADD      R3,R3,R2
   \   00000014   0xF245 0x6466      MOVW     R4,#+22118
   \   00000018   0x4423             ADD      R3,R3,R4
   \   0000001A   0x6EC4             LDR      R4,[R0, #+108]
   \   0000001C   0x78DD             LDRB     R5,[R3, #+3]
   \   0000001E   0x42AC             CMP      R4,R5
   \   00000020   0xDA0B             BGE.N    ??Check_Stop_Line_2
   \   00000022   0x789D             LDRB     R5,[R3, #+2]
   \   00000024   0x42AC             CMP      R4,R5
   \   00000026   0xDA08             BGE.N    ??Check_Stop_Line_2
   \   00000028   0x785D             LDRB     R5,[R3, #+1]
   \   0000002A   0x42A5             CMP      R5,R4
   \   0000002C   0xDA05             BGE.N    ??Check_Stop_Line_2
   \   0000002E   0x781B             LDRB     R3,[R3, #+0]
   \   00000030   0x42A3             CMP      R3,R4
   \   00000032   0xDA02             BGE.N    ??Check_Stop_Line_2
     57              {
     58                up_dpwn_count++; 
   \   00000034   0x1C49             ADDS     R1,R1,#+1
     59                if(up_dpwn_count>8)
   \   00000036   0x2909             CMP      R1,#+9
   \   00000038   0xDA23             BGE.N    ??Check_Stop_Line_3
     60                {
     61                  stop_line_count++;
     62                  return;
     63                }
     64              }
     65            }  
   \                     ??Check_Stop_Line_2: (+1)
   \   0000003A   0x1E52             SUBS     R2,R2,#+1
   \   0000003C   0x67C2             STR      R2,[R0, #+124]
   \                     ??Check_Stop_Line_0: (+1)
   \   0000003E   0x6FC2             LDR      R2,[R0, #+124]
   \   00000040   0x2A0B             CMP      R2,#+11
   \   00000042   0xDAE4             BGE.N    ??Check_Stop_Line_1
     66            for(i=H/2;i<H-10;i++)
   \   00000044   0x229E             MOVS     R2,#+158
   \   00000046   0x67C2             STR      R2,[R0, #+124]
   \                     ??Check_Stop_Line_4: (+1)
   \   00000048   0x6FC3             LDR      R3,[R0, #+124]
   \   0000004A   0xF5B3 0x7F99      CMP      R3,#+306
   \   0000004E   0xDA1B             BGE.N    ??Check_Stop_Line_5
     67            {
     68              //@@@@
     69              if(Img_Data[stop_row][i-1]<YUZHI && Img_Data[stop_row][i]<YUZHI && Img_Data[stop_row][i+1]>YUZHI && Img_Data[stop_row][i+2]>YUZHI)
   \   00000050   0x.... 0x....      LDR.W    R2,??DataTable17_2
   \   00000054   0x441A             ADD      R2,R2,R3
   \   00000056   0xF245 0x6467      MOVW     R4,#+22119
   \   0000005A   0x4414             ADD      R4,R2,R4
   \   0000005C   0x6EC2             LDR      R2,[R0, #+108]
   \   0000005E   0x7825             LDRB     R5,[R4, #+0]
   \   00000060   0x4295             CMP      R5,R2
   \   00000062   0xDA0B             BGE.N    ??Check_Stop_Line_6
   \   00000064   0x7865             LDRB     R5,[R4, #+1]
   \   00000066   0x4295             CMP      R5,R2
   \   00000068   0xDA08             BGE.N    ??Check_Stop_Line_6
   \   0000006A   0x78A5             LDRB     R5,[R4, #+2]
   \   0000006C   0x42AA             CMP      R2,R5
   \   0000006E   0xDA05             BGE.N    ??Check_Stop_Line_6
   \   00000070   0x78E4             LDRB     R4,[R4, #+3]
   \   00000072   0x42A2             CMP      R2,R4
   \   00000074   0xDA02             BGE.N    ??Check_Stop_Line_6
     70              {
     71                up_dpwn_count++; 
   \   00000076   0x1C49             ADDS     R1,R1,#+1
     72                if(up_dpwn_count>8)
   \   00000078   0x2909             CMP      R1,#+9
   \   0000007A   0xDA02             BGE.N    ??Check_Stop_Line_3
   \                     ??Check_Stop_Line_6: (+1)
   \   0000007C   0x1C5B             ADDS     R3,R3,#+1
   \   0000007E   0x67C3             STR      R3,[R0, #+124]
   \   00000080   0xE7E2             B.N      ??Check_Stop_Line_4
     73                {
     74                  stop_line_count++;
   \                     ??Check_Stop_Line_3: (+1)
   \   00000082   0x78C1             LDRB     R1,[R0, #+3]
   \   00000084   0x1C49             ADDS     R1,R1,#+1
   \   00000086   0x70C1             STRB     R1,[R0, #+3]
     75                  return;
     76                }
     77              }
     78            }
     79          }
   \                     ??Check_Stop_Line_5: (+1)
   \   00000088   0xBC31             POP      {R0,R4,R5}
   \   0000008A   0x4770             BX       LR               ;; return
     80          
     81          

   \                                 In section .text, align 4, keep-with-next
     82          void Get_Bound_Qian(void)      
     83          {
   \                     Get_Bound_Qian: (+1)
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
     84            Led_On();
   \   00000004   0x.... 0x....      BL       Led_On
     85            count=0;
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable17_1
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x7020             STRB     R0,[R4, #+0]
     86            No_Bound=0;  
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable17_3
   \   00000014   0x70A8             STRB     R0,[R5, #+2]
     87            Check_Stop_Line();
   \   00000016   0x.... 0x....      BL       Check_Stop_Line
     88            if(stop_line_count>2) should_stop=1;
   \   0000001A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000001C   0x2802             CMP      R0,#+2
   \   0000001E   0xDD01             BLE.N    ??Get_Bound_Qian_1
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x70A0             STRB     R0,[R4, #+2]
     89            if(Img_Data[value_hang][H/2] > YUZHI)
   \                     ??Get_Bound_Qian_1: (+1)
   \   00000024   0x792A             LDRB     R2,[R5, #+4]
   \   00000026   0x6EE3             LDR      R3,[R4, #+108]
   \   00000028   0xF44F 0x769E      MOV      R6,#+316
   \   0000002C   0x.... 0x....      LDR.W    R7,??DataTable17_2
   \   00000030   0xF107 0x009E      ADD      R0,R7,#+158
   \   00000034   0xFB16 0xF102      SMULBB   R1,R6,R2
   \   00000038   0x5C40             LDRB     R0,[R0, R1]
   \   0000003A   0x4283             CMP      R3,R0
   \   0000003C   0xF280 0x80C9      BGE.W    ??Get_Bound_Qian_2
     90            {	
     91              for(i=value_hang; i>=value_hang-scan_hang; i--)
   \   00000040   0x67E2             STR      R2,[R4, #+124]
   \   00000042   0xE003             B.N      ??Get_Bound_Qian_3
   \                     ??Get_Bound_Qian_4: (+1)
   \   00000044   0xF1AC 0x0C01      SUB      R12,R12,#+1
   \   00000048   0xF8C4 0xC07C      STR      R12,[R4, #+124]
   \                     ??Get_Bound_Qian_3: (+1)
   \   0000004C   0xF8D4 0xC07C      LDR      R12,[R4, #+124]
   \   00000050   0x78E8             LDRB     R0,[R5, #+3]
   \   00000052   0x1A10             SUBS     R0,R2,R0
   \   00000054   0x4584             CMP      R12,R0
   \   00000056   0xF2C0 0x809E      BLT.W    ??Get_Bound_Qian_5
     92              {	
     93                /****@@@@@****/
     94                for(j=H/2; j>1; j--)
   \   0000005A   0x209E             MOVS     R0,#+158
   \   0000005C   0x60A8             STR      R0,[R5, #+8]
   \   0000005E   0xE001             B.N      ??Get_Bound_Qian_6
   \                     ??Get_Bound_Qian_7: (+1)
   \   00000060   0x1E40             SUBS     R0,R0,#+1
   \   00000062   0x60A8             STR      R0,[R5, #+8]
   \                     ??Get_Bound_Qian_6: (+1)
   \   00000064   0x68A8             LDR      R0,[R5, #+8]
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xDD18             BLE.N    ??Get_Bound_Qian_8
     95                {
     96                  if((Img_Data[i][j+1] > YUZHI) && (Img_Data[i][j] < YUZHI)&& (Img_Data[i][j-1] < YUZHI))
   \   0000006A   0xFB06 0xF10C      MUL      R1,R6,R12
   \   0000006E   0x4439             ADD      R1,R7,R1
   \   00000070   0xEB01 0x0E00      ADD      LR,R1,R0
   \   00000074   0xF89E 0x8001      LDRB     R8,[LR, #+1]
   \   00000078   0x4543             CMP      R3,R8
   \   0000007A   0xDAF1             BGE.N    ??Get_Bound_Qian_7
   \   0000007C   0x5C09             LDRB     R1,[R1, R0]
   \   0000007E   0x4299             CMP      R1,R3
   \   00000080   0xDAEE             BGE.N    ??Get_Bound_Qian_7
   \   00000082   0xF81E 0x1C01      LDRB     R1,[LR, #-1]
   \   00000086   0x4299             CMP      R1,R3
   \   00000088   0xDAEA             BGE.N    ??Get_Bound_Qian_7
     97                  {
     98                    Left_Bound[count] = j+1;
   \   0000008A   0x1C41             ADDS     R1,R0,#+1
   \   0000008C   0x.... 0x....      LDR.W    LR,??DataTable17_4
   \   00000090   0xF894 0x8000      LDRB     R8,[R4, #+0]
   \   00000094   0xF84E 0x1028      STR      R1,[LR, R8, LSL #+2]
     99                    LEFT_Flag = 1;
   \   00000098   0x2101             MOVS     R1,#+1
   \   0000009A   0x7029             STRB     R1,[R5, #+0]
    100                    break;
    101                  }
    102                }
    103                /****@@@@@@@****/
    104                if(j <= 1) 
   \                     ??Get_Bound_Qian_8: (+1)
   \   0000009C   0xF894 0xE000      LDRB     LR,[R4, #+0]
   \   000000A0   0x46F0             MOV      R8,LR
   \   000000A2   0x2801             CMP      R0,#+1
   \   000000A4   0xDC06             BGT.N    ??Get_Bound_Qian_9
    105                {
    106                  Left_Bound[count] = 1;
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable17_4
   \   000000AC   0xF841 0x0028      STR      R0,[R1, R8, LSL #+2]
    107                  LEFT_Flag = 0;
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x7028             STRB     R0,[R5, #+0]
    108                }
    109                
    110                /****@@@@@****/
    111                for(j=H/2;j<H-2;j++)
   \                     ??Get_Bound_Qian_9: (+1)
   \   000000B4   0x209E             MOVS     R0,#+158
   \   000000B6   0x60A8             STR      R0,[R5, #+8]
   \   000000B8   0xE001             B.N      ??Get_Bound_Qian_10
   \                     ??Get_Bound_Qian_11: (+1)
   \   000000BA   0x1C40             ADDS     R0,R0,#+1
   \   000000BC   0x60A8             STR      R0,[R5, #+8]
   \                     ??Get_Bound_Qian_10: (+1)
   \   000000BE   0x68A8             LDR      R0,[R5, #+8]
   \   000000C0   0xF5B0 0x7F9D      CMP      R0,#+314
   \   000000C4   0xDA16             BGE.N    ??Get_Bound_Qian_12
    112                {
    113                  if((Img_Data[i][j-1] > YUZHI)  && (Img_Data[i][j] <YUZHI)&& (Img_Data[i][j+1] < YUZHI))
   \   000000C6   0xFB06 0xF10C      MUL      R1,R6,R12
   \   000000CA   0x4439             ADD      R1,R7,R1
   \   000000CC   0xEB01 0x0900      ADD      R9,R1,R0
   \   000000D0   0xF819 0xAC01      LDRB     R10,[R9, #-1]
   \   000000D4   0x4553             CMP      R3,R10
   \   000000D6   0xDAF0             BGE.N    ??Get_Bound_Qian_11
   \   000000D8   0x5C09             LDRB     R1,[R1, R0]
   \   000000DA   0x4299             CMP      R1,R3
   \   000000DC   0xDAED             BGE.N    ??Get_Bound_Qian_11
   \   000000DE   0xF899 0x1001      LDRB     R1,[R9, #+1]
   \   000000E2   0x4299             CMP      R1,R3
   \   000000E4   0xDAE9             BGE.N    ??Get_Bound_Qian_11
    114                  {
    115                    Right_Bound[count] = j-1;
   \   000000E6   0x1E41             SUBS     R1,R0,#+1
   \   000000E8   0x.... 0x....      LDR.W    R9,??DataTable17_5
   \   000000EC   0xF849 0x1028      STR      R1,[R9, R8, LSL #+2]
    116                    RIGHT_Flag = 1;
   \   000000F0   0x2101             MOVS     R1,#+1
   \   000000F2   0x7069             STRB     R1,[R5, #+1]
    117                    break;
    118                  }
    119                }
    120                /****@@@@@@@****/
    121                if(j >= H-2) 
   \                     ??Get_Bound_Qian_12: (+1)
   \   000000F4   0x.... 0x....      LDR.W    R9,??DataTable17_5
   \   000000F8   0xF5B0 0x7F9D      CMP      R0,#+314
   \   000000FC   0xDB05             BLT.N    ??Get_Bound_Qian_13
    122                {
    123                  Right_Bound[count] = H-2;
   \   000000FE   0xF44F 0x709D      MOV      R0,#+314
   \   00000102   0xF849 0x0028      STR      R0,[R9, R8, LSL #+2]
    124                  RIGHT_Flag = 0;
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x7068             STRB     R0,[R5, #+1]
    125                }
    126                
    127                
    128                
    129                /****@@@@@@@@@****/
    130                if(((LEFT_Flag == 1) && (RIGHT_Flag == 0)))
   \                     ??Get_Bound_Qian_13: (+1)
   \   0000010A   0x7868             LDRB     R0,[R5, #+1]
   \   0000010C   0x7829             LDRB     R1,[R5, #+0]
   \   0000010E   0x468A             MOV      R10,R1
   \   00000110   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000114   0xD109             BNE.N    ??Get_Bound_Qian_14
   \   00000116   0x2800             CMP      R0,#+0
   \   00000118   0xD107             BNE.N    ??Get_Bound_Qian_14
    131                {
    132                  Right_Bound[count] = H+Left_Bound[count];
   \   0000011A   0x.... 0x....      LDR.W    R10,??DataTable17_4
   \   0000011E   0xF85A 0xA028      LDR      R10,[R10, R8, LSL #+2]
   \   00000122   0xF50A 0x7A9E      ADD      R10,R10,#+316
   \   00000126   0xF849 0xA028      STR      R10,[R9, R8, LSL #+2]
    133                }
    134                if(((LEFT_Flag == 0) && (RIGHT_Flag == 1)))
   \                     ??Get_Bound_Qian_14: (+1)
   \   0000012A   0x2900             CMP      R1,#+0
   \   0000012C   0xD10C             BNE.N    ??Get_Bound_Qian_15
   \   0000012E   0x4682             MOV      R10,R0
   \   00000130   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000134   0xD108             BNE.N    ??Get_Bound_Qian_15
    135                {
    136                  Left_Bound[count] = -H+Right_Bound[count]; 
   \   00000136   0xF859 0x0028      LDR      R0,[R9, R8, LSL #+2]
   \   0000013A   0xF5A0 0x709E      SUB      R0,R0,#+316
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable17_4
   \   00000142   0xF841 0x0028      STR      R0,[R1, R8, LSL #+2]
   \   00000146   0xE00D             B.N      ??Get_Bound_Qian_16
    137                }
    138                
    139                /*******@@@@@@@****/
    140                else if((LEFT_Flag == 0) && (RIGHT_Flag == 0)) 
   \                     ??Get_Bound_Qian_15: (+1)
   \   00000148   0x4308             ORRS     R0,R0,R1
   \   0000014A   0xD10B             BNE.N    ??Get_Bound_Qian_16
    141                {
    142                  Left_Bound[count]=1;
   \   0000014C   0x2001             MOVS     R0,#+1
   \   0000014E   0x.... 0x....      LDR.W    R1,??DataTable17_4
   \   00000152   0xF841 0x0028      STR      R0,[R1, R8, LSL #+2]
    143                  Right_Bound[count]=H-1;
   \   00000156   0xF240 0x103B      MOVW     R0,#+315
   \   0000015A   0xF849 0x0028      STR      R0,[R9, R8, LSL #+2]
    144                  No_Bound++;
   \   0000015E   0x78A8             LDRB     R0,[R5, #+2]
   \   00000160   0x1C40             ADDS     R0,R0,#+1
   \   00000162   0x70A8             STRB     R0,[R5, #+2]
    145                } 
    146                
    147                Mid_Bound[count]=(Right_Bound[count] + Left_Bound[count])/2;
   \                     ??Get_Bound_Qian_16: (+1)
   \   00000164   0xF859 0x1028      LDR      R1,[R9, R8, LSL #+2]
   \   00000168   0x.... 0x....      LDR.W    R0,??DataTable17_4
   \   0000016C   0xF850 0x0028      LDR      R0,[R0, R8, LSL #+2]
   \   00000170   0x1841             ADDS     R1,R0,R1
   \   00000172   0xEB01 0x71D1      ADD      R1,R1,R1, LSR #+31
   \   00000176   0x1049             ASRS     R1,R1,#+1
   \   00000178   0x1D20             ADDS     R0,R4,#+4
   \   0000017A   0xF820 0x1018      STRH     R1,[R0, R8, LSL #+1]
    148                
    149                count++;             //@@@@@@count+1
   \   0000017E   0xF10E 0x0E01      ADD      LR,LR,#+1
   \   00000182   0xF884 0xE000      STRB     LR,[R4, #+0]
    150                
    151                if(Img_Data[i][H/2] <YUZHI)
   \   00000186   0xFB06 0xF00C      MUL      R0,R6,R12
   \   0000018A   0x4438             ADD      R0,R7,R0
   \   0000018C   0xF890 0x009E      LDRB     R0,[R0, #+158]
   \   00000190   0x4298             CMP      R0,R3
   \   00000192   0xF6BF 0xAF57      BGE.W    ??Get_Bound_Qian_4
    152                {
    153                  break;
    154                }
    155              }
    156              
    157              /*****************@@@@*************************/
    158              check_right_bound();
   \                     ??Get_Bound_Qian_5: (+1)
   \   00000196   0x.... 0x....      BL       check_right_bound
    159              check_left_bound() ;
   \   0000019A   0x.... 0x....      BL       check_left_bound
    160              judge_road_type();
   \   0000019E   0x.... 0x....      BL       judge_road_type
    161              
    162              /****************@@@@@@@*************************/
    163              if(count>6)  
   \   000001A2   0x7820             LDRB     R0,[R4, #+0]
   \   000001A4   0x2807             CMP      R0,#+7
   \   000001A6   0xDB14             BLT.N    ??Get_Bound_Qian_2
    164              {
    165                switch(road_type)
   \   000001A8   0x7860             LDRB     R0,[R4, #+1]
   \   000001AA   0x2803             CMP      R0,#+3
   \   000001AC   0xD80E             BHI.N    ??Get_Bound_Qian_17
   \   000001AE   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??Get_Bound_Qian_0:
   \   000001B2   0x02 0x05          DC8      0x2,0x5,0x8,0xB
   \              0x08 0x0B    
    166                {
    167                  case 0: Error_count0();break;
   \                     ??Get_Bound_Qian_18: (+1)
   \   000001B6   0x.... 0x....      BL       Error_count0
   \   000001BA   0xE007             B.N      ??Get_Bound_Qian_17
    168                  case 1: Error_count1();break;
   \                     ??Get_Bound_Qian_19: (+1)
   \   000001BC   0x.... 0x....      BL       Error_count1
   \   000001C0   0xE004             B.N      ??Get_Bound_Qian_17
    169                  case 2: Error_count2();break;
   \                     ??Get_Bound_Qian_20: (+1)
   \   000001C2   0x.... 0x....      BL       Error_count2
   \   000001C6   0xE001             B.N      ??Get_Bound_Qian_17
    170                  case 3: Error_count3();break;
   \                     ??Get_Bound_Qian_21: (+1)
   \   000001C8   0x.... 0x....      BL       Error_count3
    171                }
    172                Error_Last = Error;
   \                     ??Get_Bound_Qian_17: (+1)
   \   000001CC   0x6F20             LDR      R0,[R4, #+112]
   \   000001CE   0x6760             STR      R0,[R4, #+116]
   \   000001D0   0xE001             B.N      ??Get_Bound_Qian_22
    173              }
    174              else
    175              {
    176                Error = Error_Last;
    177              }
    178            }
    179            else
    180            {
    181              Error = Error_Last;
   \                     ??Get_Bound_Qian_2: (+1)
   \   000001D2   0x6F60             LDR      R0,[R4, #+116]
   \   000001D4   0x6720             STR      R0,[R4, #+112]
    182            }
    183            
    184            //Speed_Control();
    185            Direction_Control();     //@@@@ 
   \                     ??Get_Bound_Qian_22: (+1)
   \   000001D6   0x.... 0x....      BL       Direction_Control
    186            Led_Off();
   \   000001DA   0xE8BD 0x47F3      POP      {R0,R1,R4-R10,LR}
   \   000001DE   0x.... 0x....      B.W      Led_Off
    187          }
    188          
    189          
    190          
    191          
    192          /****************************************/
    193          /*@@@@@@@@@@@@1@@@@0  
    194          /**************************************/
    195          

   \                                 In section .text, align 2, keep-with-next
    196          void check_right_bound()
    197          {
   \                     check_right_bound: (+1)
   \   00000000   0xB410             PUSH     {R4}
    198            right_index=0;
   \   00000002   0x....             LDR.N    R0,??DataTable17_6
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6001             STR      R1,[R0, #+0]
    199            for(i=0;i<count-3;i++)
   \   00000008   0x....             LDR.N    R1,??DataTable17_1
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x67CA             STR      R2,[R1, #+124]
   \   0000000E   0xE001             B.N      ??check_right_bound_0
   \                     ??check_right_bound_1: (+1)
   \   00000010   0x1C52             ADDS     R2,R2,#+1
   \   00000012   0x67CA             STR      R2,[R1, #+124]
   \                     ??check_right_bound_0: (+1)
   \   00000014   0x6FCA             LDR      R2,[R1, #+124]
   \   00000016   0x780B             LDRB     R3,[R1, #+0]
   \   00000018   0x1EDB             SUBS     R3,R3,#+3
   \   0000001A   0x429A             CMP      R2,R3
   \   0000001C   0xDA0A             BGE.N    ??check_right_bound_2
    200            {
    201              if(Right_Bound[i+1] - Right_Bound[i] < -10)
   \   0000001E   0x....             LDR.N    R3,??DataTable17_5
   \   00000020   0xEB03 0x0482      ADD      R4,R3,R2, LSL #+2
   \   00000024   0x6864             LDR      R4,[R4, #+4]
   \   00000026   0xF853 0x3022      LDR      R3,[R3, R2, LSL #+2]
   \   0000002A   0x1AE4             SUBS     R4,R4,R3
   \   0000002C   0xF114 0x0F0A      CMN      R4,#+10
   \   00000030   0xDAEE             BGE.N    ??check_right_bound_1
    202              {
    203                right_index = i;
   \   00000032   0x6002             STR      R2,[R0, #+0]
    204                break;
    205              }
    206            }
    207          }
   \                     ??check_right_bound_2: (+1)
   \   00000034   0xBC10             POP      {R4}
   \   00000036   0x4770             BX       LR               ;; return
    208          
    209          
    210          /****************************************/
    211          /*@@@@@@@@@@@@@@
    212          /**************************************/

   \                                 In section .text, align 2, keep-with-next
    213          void check_left_bound() 
    214          {
   \                     check_left_bound: (+1)
   \   00000000   0xB410             PUSH     {R4}
    215            left_index=0;
   \   00000002   0x....             LDR.N    R0,??DataTable17_6
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6041             STR      R1,[R0, #+4]
    216            for(i=0;i<count-3;i++)
   \   00000008   0x....             LDR.N    R1,??DataTable17_1
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x67CA             STR      R2,[R1, #+124]
   \   0000000E   0xE001             B.N      ??check_left_bound_0
   \                     ??check_left_bound_1: (+1)
   \   00000010   0x1C52             ADDS     R2,R2,#+1
   \   00000012   0x67CA             STR      R2,[R1, #+124]
   \                     ??check_left_bound_0: (+1)
   \   00000014   0x6FCA             LDR      R2,[R1, #+124]
   \   00000016   0x780B             LDRB     R3,[R1, #+0]
   \   00000018   0x1EDB             SUBS     R3,R3,#+3
   \   0000001A   0x429A             CMP      R2,R3
   \   0000001C   0xDA09             BGE.N    ??check_left_bound_2
    217            {
    218              if(Left_Bound[i+1] - Left_Bound[i] > 10)
   \   0000001E   0x....             LDR.N    R3,??DataTable17_4
   \   00000020   0x1D1C             ADDS     R4,R3,#+4
   \   00000022   0xF854 0x4022      LDR      R4,[R4, R2, LSL #+2]
   \   00000026   0xF853 0x3022      LDR      R3,[R3, R2, LSL #+2]
   \   0000002A   0x1AE4             SUBS     R4,R4,R3
   \   0000002C   0x2C0B             CMP      R4,#+11
   \   0000002E   0xDBEF             BLT.N    ??check_left_bound_1
    219              {
    220                left_index = i;
   \   00000030   0x6042             STR      R2,[R0, #+4]
    221                break;
    222              }
    223            }
    224          }
   \                     ??check_left_bound_2: (+1)
   \   00000032   0xBC10             POP      {R4}
   \   00000034   0x4770             BX       LR               ;; return
    225          
    226          
    227          /****************************************/
    228          /*@@@@@@@@@@@@@@
    229          /**************************************/

   \                                 In section .text, align 2, keep-with-next
    230          void judge_road_type()
    231          {
    232            if(right_index==0 && left_index==0) road_type = 0;
   \                     judge_road_type: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable17_6
   \   00000002   0x6810             LDR      R0,[R2, #+0]
   \   00000004   0x6851             LDR      R1,[R2, #+4]
   \   00000006   0x4308             ORRS     R0,R1,R0
   \   00000008   0xD001             BEQ.N    ??judge_road_type_0
    233            else if (right_index=0 && left_index!=0) road_type=1;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x6010             STR      R0,[R2, #+0]
    234            else if (right_index!=0 && left_index==0) road_type=2;
    235            else road_type=0;
   \                     ??judge_road_type_0: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR.N    R1,??DataTable17_1
   \   00000012   0x7048             STRB     R0,[R1, #+1]
    236            //road_type=3; 
    237          }
   \   00000014   0x4770             BX       LR               ;; return
    238          
    239          // @@@@@@@@@@30@

   \                                 In section .text, align 2, keep-with-next
    240          void Error_count0(void)
    241          {
   \                     Error_count0: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    242            int cc=0;
   \   00000002   0x2500             MOVS     R5,#+0
    243            float sum=0;
   \   00000004   0x462E             MOV      R6,R5
    244            for(i=0;i<count;i++)
   \   00000006   0x....             LDR.N    R4,??DataTable17_1
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x67E0             STR      R0,[R4, #+124]
   \                     ??Error_count0_0: (+1)
   \   0000000C   0x6FE7             LDR      R7,[R4, #+124]
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x4287             CMP      R7,R0
   \   00000012   0xDA11             BGE.N    ??Error_count0_1
    245            {
    246              cc++;
   \   00000014   0x1C6D             ADDS     R5,R5,#+1
    247              sum+=(Mid_Bound[i]-MID_LINE);
   \   00000016   0xEB04 0x0047      ADD      R0,R4,R7, LSL #+1
   \   0000001A   0xF9B0 0x0004      LDRSH    R0,[R0, #+4]
   \   0000001E   0x6FA1             LDR      R1,[R4, #+120]
   \   00000020   0x1A40             SUBS     R0,R0,R1
   \   00000022   0x.... 0x....      BL       __aeabi_i2f
   \   00000026   0x4631             MOV      R1,R6
   \   00000028   0x.... 0x....      BL       __aeabi_fadd
   \   0000002C   0x4606             MOV      R6,R0
    248              if(i>30) break;
   \   0000002E   0x2F1F             CMP      R7,#+31
   \   00000030   0xDA02             BGE.N    ??Error_count0_1
    249            }
   \   00000032   0x1C7F             ADDS     R7,R7,#+1
   \   00000034   0x67E7             STR      R7,[R4, #+124]
   \   00000036   0xE7E9             B.N      ??Error_count0_0
    250            Error=(int)sum/cc*2;
   \                     ??Error_count0_1: (+1)
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000003E   0xFB90 0xF0F5      SDIV     R0,R0,R5
   \   00000042   0x0040             LSLS     R0,R0,#+1
   \   00000044   0x6720             STR      R0,[R4, #+112]
    251          }
   \   00000046   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    252          
    253          // @@@@@@@

   \                                 In section .text, align 2, keep-with-next
    254          void Error_count1() // @@@@@@@@@@@
    255          {
    256            Error=(int) Mid_Bound[right_index+1]-MID_LINE;
    257            Error=0;
   \                     Error_count1: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable17_1
   \   00000004   0x6708             STR      R0,[R1, #+112]
    258          }
   \   00000006   0x4770             BX       LR               ;; return
    259          

   \                                 In section .text, align 2, keep-with-next
    260          void Error_count2()
    261          {
    262            Error=(int) Mid_Bound[left_index+1]-MID_LINE;
    263            Error=0;
   \                     Error_count2: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable17_1
   \   00000004   0x6708             STR      R0,[R1, #+112]
    264          }
   \   00000006   0x4770             BX       LR               ;; return
    265          

   \                                 In section .text, align 2, keep-with-next
    266          void Error_count3()
    267          {
   \                     Error_count3: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    268            float sum=0;
   \   00000002   0x2500             MOVS     R5,#+0
    269            for(i=0;i<left_index-1&&i<count;i++)
   \   00000004   0x....             LDR.N    R4,??DataTable17_1
   \   00000006   0x4628             MOV      R0,R5
   \   00000008   0x67E0             STR      R0,[R4, #+124]
   \                     ??Error_count3_0: (+1)
   \   0000000A   0x7827             LDRB     R7,[R4, #+0]
   \   0000000C   0x6FE6             LDR      R6,[R4, #+124]
   \   0000000E   0x....             LDR.N    R0,??DataTable17_6
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x1E40             SUBS     R0,R0,#+1
   \   00000014   0x4286             CMP      R6,R0
   \   00000016   0xDA10             BGE.N    ??Error_count3_1
   \   00000018   0x42BE             CMP      R6,R7
   \   0000001A   0xDA0E             BGE.N    ??Error_count3_1
    270            {
    271              sum += Left_Bound[i] - MID_LINE + i;
   \   0000001C   0x....             LDR.N    R0,??DataTable17_4
   \   0000001E   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000022   0x6FA1             LDR      R1,[R4, #+120]
   \   00000024   0x1A40             SUBS     R0,R0,R1
   \   00000026   0x1830             ADDS     R0,R6,R0
   \   00000028   0x.... 0x....      BL       __aeabi_i2f
   \   0000002C   0x4629             MOV      R1,R5
   \   0000002E   0x.... 0x....      BL       __aeabi_fadd
   \   00000032   0x4605             MOV      R5,R0
    272            }
   \   00000034   0x1C76             ADDS     R6,R6,#+1
   \   00000036   0x67E6             STR      R6,[R4, #+124]
   \   00000038   0xE7E7             B.N      ??Error_count3_0
    273            Error = (int)sum/count;
   \                     ??Error_count3_1: (+1)
   \   0000003A   0x4628             MOV      R0,R5
   \   0000003C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000040   0xFB90 0xF0F7      SDIV     R0,R0,R7
   \   00000044   0x6720             STR      R0,[R4, #+112]
    274          
    275          }
   \   00000046   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    276          
    277          /*************************************************************************
    278          * @@@@@Direction_Control
    279          * @@@@@@@@@
    280          * @@@@@Dir_Kp     @@@@@@
    281          Dir_Kd     @@@@@@
    282          * @@@@@@
    283          *************************************************************************/

   \                                 In section .data, align 4
    284          uint8 Dir_Kp=1;
   \                     Dir_Kp:
   \   00000000   0x01               DC8 1
    285          uint8 Dir_Ki=1;
   \                     Dir_Ki:
   \   00000001   0x01               DC8 1
    286          uint8 Dir_Kd=0;
   \                     Dir_Kd:
   \   00000002   0x00               DC8 0
   \   00000003   0x00               DC8 0
    287          int16 Direction_Error;
   \                     Direction_Error:
   \   00000004   0x00 0x00          DC8 0, 0
    288          int16 Direction_Error_Last;
   \                     Direction_Error_Last:
   \   00000006   0x00 0x00          DC8 0, 0
    289          int16 Direction_Error_Last2 ;
   \                     Direction_Error_Last2:
   \   00000008   0x00 0x00          DC8 0, 0
   \   0000000A   0x00 0x00          DC8 0, 0
    290          int Direction_Control_Out = 0;
   \                     Direction_Control_Out:
   \   0000000C   0x00000000         DC32 0
    291          int ret;
   \                     ret:
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .text, align 2, keep-with-next
    292          void Direction_Control(void)
    293          {
   \                     Direction_Control: (+1)
   \   00000000   0xB478             PUSH     {R3-R6}
    294            
    295            int16 Dir_nP = 0;
    296            int16 Dir_nI = 0;
    297            int16 Dir_nD = 0;
    298            
    299            Direction_Error_Last2 =Direction_Error_Last;
   \   00000002   0x....             LDR.N    R1,??DataTable17_7
   \   00000004   0xF9B1 0x2006      LDRSH    R2,[R1, #+6]
   \   00000008   0x810A             STRH     R2,[R1, #+8]
    300            Direction_Error_Last = Direction_Error;
   \   0000000A   0xF9B1 0x3004      LDRSH    R3,[R1, #+4]
   \   0000000E   0x80CB             STRH     R3,[R1, #+6]
    301            Direction_Error =Error; 
   \   00000010   0x....             LDR.N    R0,??DataTable17_1
   \   00000012   0x6F00             LDR      R0,[R0, #+112]
   \   00000014   0x8088             STRH     R0,[R1, #+4]
    302            
    303            
    304            //@@@
    305            Dir_nP = Dir_Kp*(Direction_Error-Direction_Error_Last);    //@@@@@@@
    306            Dir_nI = Dir_Ki*Direction_Error;                         //@@@@@@@
    307            Dir_nD = Dir_Kd*(Direction_Error-2*Direction_Error_Last+Direction_Error_Last2);  //@@@@@@@
    308            
    309            
    310            /****@@@@@@@****/
    311            ret = (Dir_nP+Dir_nD+Dir_nI);
   \   00000016   0xF9B1 0x4004      LDRSH    R4,[R1, #+4]
   \   0000001A   0x780D             LDRB     R5,[R1, #+0]
   \   0000001C   0x1AE0             SUBS     R0,R4,R3
   \   0000001E   0x4345             MULS     R5,R0,R5
   \   00000020   0x788E             LDRB     R6,[R1, #+2]
   \   00000022   0xEBA4 0x0043      SUB      R0,R4,R3, LSL #+1
   \   00000026   0x1880             ADDS     R0,R0,R2
   \   00000028   0x4346             MULS     R6,R0,R6
   \   0000002A   0xB236             SXTH     R6,R6
   \   0000002C   0xFA06 0xF085      SXTAH    R0,R6,R5
   \   00000030   0x784A             LDRB     R2,[R1, #+1]
   \   00000032   0xFB14 0xF402      SMULBB   R4,R4,R2
   \   00000036   0xFA00 0xF084      SXTAH    R0,R0,R4
   \   0000003A   0x6108             STR      R0,[R1, #+16]
    312            Direction_Control_Out =  730+ret; 
   \   0000003C   0xF200 0x20DA      ADDW     R0,R0,#+730
   \   00000040   0x60C8             STR      R0,[R1, #+12]
    313            Server_Drive(Direction_Control_Out);
   \   00000042   0xBC72             POP      {R1,R4-R6}
   \   00000044   0x.... 0x....      B.W      Server_Drive
    314            
    315          }
    316          
    317          /*************************************************************************
    318          * @@@@@Speed_Control
    319          * @@@@@@@@@@@@@@@PID@@
    320          * @@@@@Speed_Set  @@@@
    321                      Spe_Kp     @@@@@@
    322                      Spe_Ki     @@@@@@
    323                      Spe_Kd     @@@@@@
    324          * @@@@@@
    325          *************************************************************************/

   \                                 In section .data, align 2
    326          uint8 Spe_Kp = 4;
   \                     Spe_Kp:
   \   00000000   0x04               DC8 4
    327          uint8 Spe_Ki = 1;
   \                     Spe_Ki:
   \   00000001   0x01               DC8 1
    328          uint8 Spe_Kd = 0;
   \                     Spe_Kd:
   \   00000002   0x00               DC8 0
   \   00000003   0x00               DC8 0
    329          
    330          int16 Speed_Control_Out=0;
   \                     Speed_Control_Out:
   \   00000004   0x0000             DC16 0
    331          int16 Speed_Set=100;
   \                     Speed_Set:
   \   00000006   0x0064             DC16 100
    332          int16 Speed_Error = 0;
   \                     Speed_Error:
   \   00000008   0x0000             DC16 0
    333          
    334          int16 Spe_nP = 0;
   \                     Spe_nP:
   \   0000000A   0x0000             DC16 0
    335          int16 Spe_nI = 0;
   \                     Spe_nI:
   \   0000000C   0x0000             DC16 0
    336          int16 Spe_nD= 0;
   \                     Spe_nD:
   \   0000000E   0x0000             DC16 0
    337          int16 Spe_nI_Last=0;
   \                     Spe_nI_Last:
   \   00000010   0x0000             DC16 0
    338          int16 Speed_Error_Last = 0;  
   \                     Speed_Error_Last:
   \   00000012   0x0000             DC16 0

   \                                 In section .bss, align 1
    339          int8 Speed_Flag = 0;
   \                     Speed_Flag:
   \   00000000                      DS8 1
    340          

   \                                 In section .text, align 2, keep-with-next
    341          void Speed_Control()
    342          { 
   \                     Speed_Control: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    343            int8 delt_error= abs(Error-Error_Last);
   \   00000002   0x....             LDR.N    R5,??DataTable17_1
   \   00000004   0x6F28             LDR      R0,[R5, #+112]
   \   00000006   0x6F69             LDR      R1,[R5, #+116]
   \   00000008   0x1A40             SUBS     R0,R0,R1
   \   0000000A   0x.... 0x....      BL       abs
   \   0000000E   0x4606             MOV      R6,R0
    344            if(should_stop==1)Speed_Set=0;
   \   00000010   0x....             LDR.N    R4,??DataTable17_8
   \   00000012   0x78A8             LDRB     R0,[R5, #+2]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD102             BNE.N    ??Speed_Control_0
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x80E0             STRH     R0,[R4, #+6]
   \   0000001C   0xE00C             B.N      ??Speed_Control_1
    345            /*else if(abs(Error)<10 && delt_error<5 && QD_Interval>150)
    346            {
    347              Speed_Set=175;
    348            }
    349            else if(abs(Error)<20 && delt_error<10 && QD_Interval>130)
    350            {
    351              Speed_Set=155;
    352            }*/
    353            else if(abs(Error)<40 && delt_error<10)
   \                     ??Speed_Control_0: (+1)
   \   0000001E   0x6F28             LDR      R0,[R5, #+112]
   \   00000020   0x.... 0x....      BL       abs
   \   00000024   0x2828             CMP      R0,#+40
   \   00000026   0xDA05             BGE.N    ??Speed_Control_2
   \   00000028   0xB276             SXTB     R6,R6
   \   0000002A   0x2E0A             CMP      R6,#+10
   \   0000002C   0xDA02             BGE.N    ??Speed_Control_2
    354            {
    355              Speed_Set=190;
   \   0000002E   0x20BE             MOVS     R0,#+190
   \   00000030   0x80E0             STRH     R0,[R4, #+6]
   \   00000032   0xE001             B.N      ??Speed_Control_1
    356            }
    357            else{
    358              Speed_Set=100;
   \                     ??Speed_Control_2: (+1)
   \   00000034   0x2064             MOVS     R0,#+100
   \   00000036   0x80E0             STRH     R0,[R4, #+6]
    359            }
    360             
    361            /****@@@-@@@****/
    362             Speed_Error = Speed_Set-QD_Interval;
   \                     ??Speed_Control_1: (+1)
   \   00000038   0x88E0             LDRH     R0,[R4, #+6]
   \   0000003A   0x....             LDR.N    R1,??DataTable17_9
   \   0000003C   0x680B             LDR      R3,[R1, #+0]
   \   0000003E   0x1AC3             SUBS     R3,R0,R3
   \   00000040   0x8123             STRH     R3,[R4, #+8]
    363          
    364            
    365            /****@@@@@@@****/
    366             Spe_nP = Spe_Kp*Speed_Error;
   \   00000042   0x7820             LDRB     R0,[R4, #+0]
   \   00000044   0xFB10 0xF103      SMULBB   R1,R0,R3
   \   00000048   0x8161             STRH     R1,[R4, #+10]
    367            
    368            /****@@@@@@@****/
    369              Spe_nI = Spe_Ki*Speed_Error;
    370              Spe_nI= Spe_nI_Last+Spe_nI;
   \   0000004A   0x8A20             LDRH     R0,[R4, #+16]
   \   0000004C   0x7862             LDRB     R2,[R4, #+1]
   \   0000004E   0xFB12 0x0003      SMLABB   R0,R2,R3,R0
   \   00000052   0x81A0             STRH     R0,[R4, #+12]
    371              Spe_nI_Last = Spe_nI;
   \   00000054   0x8220             STRH     R0,[R4, #+16]
    372            
    373            /****@@@@@@@****/
    374              Spe_nD = Spe_Kd*(Speed_Error-Speed_Error_Last);
   \   00000056   0x78A2             LDRB     R2,[R4, #+2]
   \   00000058   0x8A65             LDRH     R5,[R4, #+18]
   \   0000005A   0x1B5D             SUBS     R5,R3,R5
   \   0000005C   0xFB12 0xF205      SMULBB   R2,R2,R5
   \   00000060   0x81E2             STRH     R2,[R4, #+14]
    375              Speed_Error_Last = Speed_Error;
   \   00000062   0x8263             STRH     R3,[R4, #+18]
    376            
    377            
    378            
    379            /****@@@@@@@****/
    380            if(Spe_nI > Spe_nI_MAX)
   \   00000064   0xB200             SXTH     R0,R0
   \   00000066   0xF240 0x73D1      MOVW     R3,#+2001
   \   0000006A   0x4298             CMP      R0,R3
   \   0000006C   0xDB02             BLT.N    ??Speed_Control_3
    381              Spe_nI = Spe_nI_MAX;
   \   0000006E   0xF44F 0x63FA      MOV      R3,#+2000
   \   00000072   0x81A3             STRH     R3,[R4, #+12]
    382            if(Spe_nI < Spe_nI_MIN)
   \                     ??Speed_Control_3: (+1)
   \   00000074   0xF9B4 0x300C      LDRSH    R3,[R4, #+12]
   \   00000078   0xF513 0x6FE1      CMN      R3,#+1800
   \   0000007C   0xDA01             BGE.N    ??Speed_Control_4
    383              Spe_nI= Spe_nI_MIN;  
   \   0000007E   0x....             LDR.N    R3,??DataTable17_10  ;; 0xfffff8f8
   \   00000080   0x81A3             STRH     R3,[R4, #+12]
    384            if(Spe_nI_Last > Spe_nI_Last_MAX)
   \                     ??Speed_Control_4: (+1)
   \   00000082   0xF240 0x7309      MOVW     R3,#+1801
   \   00000086   0x4298             CMP      R0,R3
   \   00000088   0xDB02             BLT.N    ??Speed_Control_5
    385              Spe_nI_Last = Spe_nI_Last_MAX;
   \   0000008A   0xF44F 0x60E1      MOV      R0,#+1800
   \   0000008E   0x8220             STRH     R0,[R4, #+16]
    386            if(Spe_nI_Last< Spe_nI_Last_MIN)
   \                     ??Speed_Control_5: (+1)
   \   00000090   0xF9B4 0x0010      LDRSH    R0,[R4, #+16]
   \   00000094   0xF510 0x6FC8      CMN      R0,#+1600
   \   00000098   0xDA01             BGE.N    ??Speed_Control_6
    387              Spe_nI_Last = Spe_nI_Last_MIN;
   \   0000009A   0x....             LDR.N    R0,??DataTable17_11  ;; 0xfffff9c0
   \   0000009C   0x8220             STRH     R0,[R4, #+16]
    388           
    389            /****@@@@@@@****/  
    390            Speed_Control_Out = (Spe_nP+Spe_nI+Spe_nD);
   \                     ??Speed_Control_6: (+1)
   \   0000009E   0x89A0             LDRH     R0,[R4, #+12]
   \   000000A0   0x1841             ADDS     R1,R0,R1
   \   000000A2   0x1851             ADDS     R1,R2,R1
   \   000000A4   0x80A1             STRH     R1,[R4, #+4]
    391            
    392            if(Speed_Control_Out > Speed_Control_Out_MAX)
   \   000000A6   0xB209             SXTH     R1,R1
   \   000000A8   0xF640 0x0099      MOVW     R0,#+2201
   \   000000AC   0x4281             CMP      R1,R0
   \   000000AE   0xDB03             BLT.N    ??Speed_Control_7
    393              Speed_Control_Out = Speed_Control_Out_MAX;
   \   000000B0   0xF640 0x0098      MOVW     R0,#+2200
   \   000000B4   0x80A0             STRH     R0,[R4, #+4]
   \   000000B6   0xE004             B.N      ??Speed_Control_8
    394            else if(Speed_Control_Out < Speed_Control_Out_MIN)
   \                     ??Speed_Control_7: (+1)
   \   000000B8   0xF511 0x6FFA      CMN      R1,#+2000
   \   000000BC   0xDA01             BGE.N    ??Speed_Control_8
    395              Speed_Control_Out = Speed_Control_Out_MIN;
   \   000000BE   0x....             LDR.N    R0,??DataTable17_12  ;; 0xfffff830
   \   000000C0   0x80A0             STRH     R0,[R4, #+4]
    396            //Speed_Control_Out*=8;
    397            Motor_Drive((int16)(Speed_Control_Out));
   \                     ??Speed_Control_8: (+1)
   \   000000C2   0xF9B4 0x0004      LDRSH    R0,[R4, #+4]
   \   000000C6   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000CA   0x.... 0x....      B.W      Motor_Drive
    398            
    399          }
    400          
    401          
    402          

   \                                 In section .text, align 2, keep-with-next
    403          void Show_Num(void)
    404          {
   \                     Show_Num: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0xB094             SUB      SP,SP,#+80
    405            LCD_CLS();
   \   00000004   0x.... 0x....      BL       LCD_CLS
    406            char error[15];
    407            char set[15];
    408            char speed[15];
    409            char out[15];
    410            char stop[15];
    411            sprintf(error, "Error:%d", Error);
   \   00000008   0x....             LDR.N    R4,??DataTable17_1
   \   0000000A   0x6F22             LDR      R2,[R4, #+112]
   \   0000000C   0x.... 0x....      ADR.W    R1,?_0
   \   00000010   0xA810             ADD      R0,SP,#+64
   \   00000012   0x.... 0x....      BL       sprintf
    412            sprintf(set, "SpeedSet:%d", Speed_Set);
   \   00000016   0x....             LDR.N    R5,??DataTable17_8
   \   00000018   0xF9B5 0x2006      LDRSH    R2,[R5, #+6]
   \   0000001C   0x.... 0x....      ADR.W    R1,?_1
   \   00000020   0xA80C             ADD      R0,SP,#+48
   \   00000022   0x.... 0x....      BL       sprintf
    413            sprintf(speed, "Speed:%d", QD_Interval);
   \   00000026   0x....             LDR.N    R0,??DataTable17_9
   \   00000028   0x6802             LDR      R2,[R0, #+0]
   \   0000002A   0x.... 0x....      ADR.W    R1,?_2
   \   0000002E   0xA808             ADD      R0,SP,#+32
   \   00000030   0x.... 0x....      BL       sprintf
    414            sprintf(out, "Out:%d", Speed_Control_Out); 
   \   00000034   0xF9B5 0x2004      LDRSH    R2,[R5, #+4]
   \   00000038   0x.... 0x....      ADR.W    R1,?_3
   \   0000003C   0xA804             ADD      R0,SP,#+16
   \   0000003E   0x.... 0x....      BL       sprintf
    415            sprintf(stop, "Stop:%d", should_stop); 
   \   00000042   0x78A2             LDRB     R2,[R4, #+2]
   \   00000044   0x.... 0x....      ADR.W    R1,?_4
   \   00000048   0x4668             MOV      R0,SP
   \   0000004A   0x.... 0x....      BL       sprintf
    416            LCD_P6x8Str(0, 0, error);
   \   0000004E   0xAA10             ADD      R2,SP,#+64
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x4608             MOV      R0,R1
   \   00000054   0x.... 0x....      BL       LCD_P6x8Str
    417            LCD_P6x8Str(0, 1, set);
   \   00000058   0xAA0C             ADD      R2,SP,#+48
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x.... 0x....      BL       LCD_P6x8Str
    418            LCD_P6x8Str(0, 2, speed);
   \   00000062   0xAA08             ADD      R2,SP,#+32
   \   00000064   0x2102             MOVS     R1,#+2
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x.... 0x....      BL       LCD_P6x8Str
    419            LCD_P6x8Str(0, 3, out);
   \   0000006C   0xAA04             ADD      R2,SP,#+16
   \   0000006E   0x2103             MOVS     R1,#+3
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x.... 0x....      BL       LCD_P6x8Str
    420            LCD_P6x8Str(0, 4, stop);
   \   00000076   0x466A             MOV      R2,SP
   \   00000078   0x2104             MOVS     R1,#+4
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      BL       LCD_P6x8Str
    421          }
   \   00000080   0xB015             ADD      SP,SP,#+84
   \   00000082   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     should_send

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     Img_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     LEFT_Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x........         DC32     Left_Bound

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x........         DC32     Right_Bound

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x........         DC32     right_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   0x........         DC32     Dir_Kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   0x........         DC32     Spe_Kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \   00000000   0x........         DC32     QD_Interval

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \   00000000   0xFFFFF8F8         DC32     0xfffff8f8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_11:
   \   00000000   0xFFFFF9C0         DC32     0xfffff9c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_12:
   \   00000000   0xFFFFF830         DC32     0xfffff830

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x45 0x72          DC8 "Error:%d"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x53 0x70          DC8 "SpeedSet:%d"
   \              0x65 0x65    
   \              0x64 0x53    
   \              0x65 0x74    
   \              0x3A 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x53 0x70          DC8 "Speed:%d"
   \              0x65 0x65    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x4F 0x75          DC8 "Out:%d"
   \              0x74 0x3A    
   \              0x25 0x64    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x53 0x74          DC8 "Stop:%d"
   \              0x6F 0x70    
   \              0x3A 0x25    
   \              0x64 0x00    
    422          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   Check_Stop_Line
      16   Direction_Control
         0   -> Server_Drive
      24   Error_count0
        24   -> __aeabi_f2iz
        24   -> __aeabi_fadd
        24   -> __aeabi_i2f
       0   Error_count1
       0   Error_count2
      24   Error_count3
        24   -> __aeabi_f2iz
        24   -> __aeabi_fadd
        24   -> __aeabi_i2f
      40   Get_Bound_Qian
        40   -> Check_Stop_Line
        40   -> Direction_Control
        40   -> Error_count0
        40   -> Error_count1
        40   -> Error_count2
        40   -> Error_count3
         0   -> Led_Off
        40   -> Led_On
        40   -> check_left_bound
        40   -> check_right_bound
        40   -> judge_road_type
       8   Img_Handler
         8   -> Show_Img
         0   -> Show_Num
      96   Show_Num
        96   -> LCD_CLS
        96   -> LCD_P6x8Str
        96   -> sprintf
      16   Speed_Control
         0   -> Motor_Drive
        16   -> abs
       4   check_left_bound
       4   check_right_bound
       0   judge_road_type


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable17_9
      12  ?_0
      12  ?_1
      12  ?_2
       8  ?_3
       8  ?_4
     140  Check_Stop_Line
      20  Dir_Kp
          Dir_Ki
          Dir_Kd
          Direction_Error
          Direction_Error_Last
          Direction_Error_Last2
          Direction_Control_Out
          ret
      72  Direction_Control
     204  Error_Hang
      72  Error_count0
       8  Error_count1
       8  Error_count2
      72  Error_count3
     482  Get_Bound_Qian
      24  Img_Handler
      12  LEFT_Flag
          RIGHT_Flag
          No_Bound
          scan_hang
          value_hang
          j
     204  Left_Bound
     204  Right_Bound
     132  Show_Num
      20  Spe_Kp
          Spe_Ki
          Spe_Kd
          Speed_Control_Out
          Speed_Set
          Speed_Error
          Spe_nP
          Spe_nI
          Spe_nD
          Spe_nI_Last
          Speed_Error_Last
     206  Speed_Control
       1  Speed_Flag
      54  check_left_bound
      56  check_right_bound
     128  count
          road_type
          should_stop
          stop_line_count
          Mid_Bound
          YUZHI
          Error
          Error_Last
          MID_LINE
          i
       4  has_right_bound
      22  judge_road_type
       4  left_bottom_index
       4  lft01_index
       4  point
       4  point_max
       4  right_bottom_index
       8  right_index
          left_index
       1  should_send

 
   646 bytes in section .bss
   180 bytes in section .data
 1 452 bytes in section .text
 
 1 452 bytes of CODE memory
   826 bytes of DATA memory

Errors: none
Warnings: 15
