###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.2.14835/W32 for ARM       17/May/2018  19:45:46
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\workspace\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_UART.c
#    Command line =  
#        -f C:\Users\JoyC\AppData\Local\Temp\EW6DA3.tmp
#        (D:\workspace\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_UART.c -D LPLD_K60 -D
#        USE_K60DZ10 -lCN
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\List -lB
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\List -o
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "D:\Program Files\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\app\ -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\CPU\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\common\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\HW\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\FatFs\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\FatFs\option\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\common\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\driver\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\descriptor\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\class\
#        -Om -I "D:\Program Files\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\List\HW_UART.lst
#    Object file  =  
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\Obj\HW_UART.o
#
###############################################################################

D:\workspace\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_UART.c
      1          /**
      2           * @file HW_UART.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief UART底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xD409             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0xF000 0x001F      AND      R0,R0,#0x1F
   \   0000000A   0xFA02 0xF000      LSL      R0,R2,R0
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable10  ;; 0xe000e100
   \   00000012   0x0949             LSRS     R1,R1,#+5
   \   00000014   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   00000018   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_DisableIRQ(IRQn_Type)
   \                     __NVIC_DisableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xD409             BMI.N    ??__NVIC_DisableIRQ_0
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0xF000 0x001F      AND      R0,R0,#0x1F
   \   0000000A   0xFA02 0xF000      LSL      R0,R2,R0
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable10_1  ;; 0xe000e180
   \   00000012   0x0949             LSRS     R1,R1,#+5
   \   00000014   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \   00000018   0x4770             BX       LR               ;; return
     23          #include "HW_UART.h"
     24          
     25          //@@@@@@@@@@@@@@

   \                                 In section .bss, align 4
     26          UART_ISR_CALLBACK UART_R_ISR[6];
   \                     UART_R_ISR:
   \   00000000                      DS8 24
     27          //@@@@@@@@@@@@@@
     28          UART_ISR_CALLBACK UART_T_ISR[6];  
   \                     UART_T_ISR:
   \   00000018                      DS8 24
     29          
     30          
     31          /*
     32           * LPLD_UART_Init
     33           * @@@UART@@@@@@@@@@@@@
     34           * 
     35           * @@:
     36           *    uart_init_structure--UART@@@@@@@
     37           *                        @@@@@UART_InitTypeDef
     38           *
     39           * @@:
     40           *    @
     41           *
     42           */

   \                                 In section .text, align 2, keep-with-next
     43          void LPLD_UART_Init(UART_InitTypeDef uart_init_structure)
     44          {
   \                     LPLD_UART_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x41F8      PUSH     {R3-R8,LR}
     45            register uint16 sbr, brfa;
     46            uint32 sysclk;
     47            uint8 temp, x ,len;
     48            UART_Type *uartx = uart_init_structure.UART_Uartx;
   \   00000006   0x4601             MOV      R1,R0
     49            uint32 baud = uart_init_structure.UART_BaudRate;
   \   00000008   0x9808             LDR      R0,[SP, #+32]
     50            PortPinsEnum_Type tx_pin = uart_init_structure.UART_TxPin;
   \   0000000A   0xF89D 0xC024      LDRB     R12,[SP, #+36]
     51            PortPinsEnum_Type rx_pin = uart_init_structure.UART_RxPin;
   \   0000000E   0xF89D 0x7025      LDRB     R7,[SP, #+37]
     52            UART_ISR_CALLBACK rx_isr = uart_init_structure.UART_RxIsr;
   \   00000012   0x9C0C             LDR      R4,[SP, #+48]
     53            UART_ISR_CALLBACK tx_isr = uart_init_structure.UART_TxIsr;
   \   00000014   0x9A0D             LDR      R2,[SP, #+52]
     54            
     55            if(baud == NULL)
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD101             BNE.N    ??LPLD_UART_Init_0
     56            {
     57              baud = 9600;
   \   0000001A   0xF44F 0x5016      MOV      R0,#+9600
     58            }
     59            
     60            //@@@@@UART@@@@@@@@@GPIO@UART@@@@   
     61            if(uartx == UART0)
   \                     ??LPLD_UART_Init_0: (+1)
   \   0000001E   0x.... 0x....      LDR.W    LR,??DataTable10_2  ;; 0x40048028
   \   00000022   0xF44F 0x7640      MOV      R6,#+768
   \   00000026   0x.... 0x....      LDR.W    R3,??DataTable10_3  ;; 0x4006a000
   \   0000002A   0x4299             CMP      R1,R3
   \   0000002C   0xD131             BNE.N    ??LPLD_UART_Init_1
     62            {
     63              x = 0;
   \   0000002E   0x2300             MOVS     R3,#+0
     64              sysclk = g_core_clock;
   \   00000030   0x.... 0x....      LDR.W    R5,??DataTable10_4
   \   00000034   0x682D             LDR      R5,[R5, #+0]
     65              SIM->SCGC4 |= SIM_SCGC4_UART0_MASK;
   \   00000036   0xF8DE 0x800C      LDR      R8,[LR, #+12]
   \   0000003A   0xF448 0x6880      ORR      R8,R8,#0x400
   \   0000003E   0xF8CE 0x800C      STR      R8,[LR, #+12]
     66              
     67              if(tx_pin == PTA2)
   \   00000042   0xF1BC 0x0F02      CMP      R12,#+2
   \   00000046   0xD106             BNE.N    ??LPLD_UART_Init_2
     68                PORTA->PCR[2] = PORT_PCR_MUX(2); 
   \   00000048   0xF44F 0x7C00      MOV      R12,#+512
   \   0000004C   0x.... 0x....      LDR.W    LR,??DataTable10_5  ;; 0x40049004
   \   00000050   0xF8CE 0xC004      STR      R12,[LR, #+4]
   \   00000054   0xE00B             B.N      ??LPLD_UART_Init_3
     69              else if(tx_pin == PTA14)
   \                     ??LPLD_UART_Init_2: (+1)
   \   00000056   0xF1BC 0x0F0E      CMP      R12,#+14
   \   0000005A   0xD104             BNE.N    ??LPLD_UART_Init_4
     70                PORTA->PCR[14] = PORT_PCR_MUX(3); 
   \   0000005C   0x.... 0x....      LDR.W    R12,??DataTable10_5  ;; 0x40049004
   \   00000060   0xF8CC 0x6034      STR      R6,[R12, #+52]
   \   00000064   0xE003             B.N      ??LPLD_UART_Init_3
     71              else
     72                PORTB->PCR[17] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_4: (+1)
   \   00000066   0x.... 0x....      LDR.W    R12,??DataTable10_6  ;; 0x4004a028
   \   0000006A   0xF8CC 0x601C      STR      R6,[R12, #+28]
     73              
     74              if(rx_pin == PTA1)
   \                     ??LPLD_UART_Init_3: (+1)
   \   0000006E   0x2F01             CMP      R7,#+1
   \   00000070   0xD105             BNE.N    ??LPLD_UART_Init_5
     75                PORTA->PCR[1] = PORT_PCR_MUX(2); 
   \   00000072   0xF44F 0x7600      MOV      R6,#+512
   \   00000076   0x.... 0x....      LDR.W    R7,??DataTable10_5  ;; 0x40049004
   \   0000007A   0x603E             STR      R6,[R7, #+0]
   \   0000007C   0xE0AE             B.N      ??LPLD_UART_Init_6
     76              else if(rx_pin == PTA15)
   \                     ??LPLD_UART_Init_5: (+1)
   \   0000007E   0x2F0F             CMP      R7,#+15
   \   00000080   0xD103             BNE.N    ??LPLD_UART_Init_7
     77                PORTA->PCR[15] = PORT_PCR_MUX(3); 
   \   00000082   0x.... 0x....      LDR.W    R7,??DataTable10_5  ;; 0x40049004
   \   00000086   0x63BE             STR      R6,[R7, #+56]
   \   00000088   0xE0A8             B.N      ??LPLD_UART_Init_6
     78              else
     79                PORTB->PCR[16] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_7: (+1)
   \   0000008A   0x.... 0x....      LDR.W    R7,??DataTable10_6  ;; 0x4004a028
   \   0000008E   0x61BE             STR      R6,[R7, #+24]
   \   00000090   0xE0A4             B.N      ??LPLD_UART_Init_6
     80            }
     81            else
     82            {
     83              if (uartx == UART1)
   \                     ??LPLD_UART_Init_1: (+1)
   \   00000092   0x.... 0x....      LDR.W    R3,??DataTable10_7  ;; 0x4006b000
   \   00000096   0x4299             CMP      R1,R3
   \   00000098   0xD11F             BNE.N    ??LPLD_UART_Init_8
     84              {
     85                x = 1;
   \   0000009A   0x2301             MOVS     R3,#+1
     86                sysclk = g_core_clock;
   \   0000009C   0x.... 0x....      LDR.W    R5,??DataTable10_4
   \   000000A0   0x682D             LDR      R5,[R5, #+0]
     87                SIM->SCGC4 |= SIM_SCGC4_UART1_MASK;
   \   000000A2   0xF8DE 0x800C      LDR      R8,[LR, #+12]
   \   000000A6   0xF448 0x6800      ORR      R8,R8,#0x800
   \   000000AA   0xF8CE 0x800C      STR      R8,[LR, #+12]
     88                
     89                if(tx_pin == PTE0)   
   \   000000AE   0xF1BC 0x0F7C      CMP      R12,#+124
   \   000000B2   0xD104             BNE.N    ??LPLD_UART_Init_9
     90                  PORTE->PCR[0] = PORT_PCR_MUX(3); 
   \   000000B4   0x.... 0x....      LDR.W    R12,??DataTable10_8  ;; 0x4004d000
   \   000000B8   0xF8CC 0x6000      STR      R6,[R12, #+0]
   \   000000BC   0xE003             B.N      ??LPLD_UART_Init_10
     91                else
     92                  PORTC->PCR[4] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_9: (+1)
   \   000000BE   0x.... 0x....      LDR.W    R12,??DataTable10_9  ;; 0x4004b00c
   \   000000C2   0xF8CC 0x6004      STR      R6,[R12, #+4]
     93                
     94                if(rx_pin == PTE1)
   \                     ??LPLD_UART_Init_10: (+1)
   \   000000C6   0x2F7D             CMP      R7,#+125
   \   000000C8   0xD103             BNE.N    ??LPLD_UART_Init_11
     95                  PORTE->PCR[1] = PORT_PCR_MUX(3); 
   \   000000CA   0x.... 0x....      LDR.W    R7,??DataTable10_8  ;; 0x4004d000
   \   000000CE   0x607E             STR      R6,[R7, #+4]
   \   000000D0   0xE084             B.N      ??LPLD_UART_Init_6
     96                else
     97                  PORTC->PCR[3] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_11: (+1)
   \   000000D2   0x.... 0x....      LDR.W    R7,??DataTable10_9  ;; 0x4004b00c
   \   000000D6   0x603E             STR      R6,[R7, #+0]
   \   000000D8   0xE080             B.N      ??LPLD_UART_Init_6
     98              }
     99              else
    100              {
    101                sysclk = g_bus_clock;
   \                     ??LPLD_UART_Init_8: (+1)
   \   000000DA   0x.... 0x....      LDR.W    R3,??DataTable10_10
   \   000000DE   0x681D             LDR      R5,[R3, #+0]
    102                if (uartx == UART2)
   \   000000E0   0x.... 0x....      LDR.W    R3,??DataTable10_11  ;; 0x4006c000
   \   000000E4   0x4299             CMP      R1,R3
   \   000000E6   0xD10B             BNE.N    ??LPLD_UART_Init_12
    103                {
    104                  x = 2;
   \   000000E8   0x2302             MOVS     R3,#+2
    105                  SIM->SCGC4 |= SIM_SCGC4_UART2_MASK;
   \   000000EA   0xF8DE 0x700C      LDR      R7,[LR, #+12]
   \   000000EE   0xF447 0x5780      ORR      R7,R7,#0x1000
   \   000000F2   0xF8CE 0x700C      STR      R7,[LR, #+12]
    106                  
    107                  PORTD->PCR[3] = PORT_PCR_MUX(3); 
   \   000000F6   0x.... 0x....      LDR.W    R7,??DataTable10_12  ;; 0x4004c008
   \   000000FA   0x607E             STR      R6,[R7, #+4]
    108                  PORTD->PCR[2] = PORT_PCR_MUX(3);
   \   000000FC   0x603E             STR      R6,[R7, #+0]
   \   000000FE   0xE06D             B.N      ??LPLD_UART_Init_6
    109                }
    110                else
    111                {
    112                  if(uartx == UART3)
   \                     ??LPLD_UART_Init_12: (+1)
   \   00000100   0x.... 0x....      LDR.W    R3,??DataTable10_13  ;; 0x4006d000
   \   00000104   0x4299             CMP      R1,R3
   \   00000106   0xD12A             BNE.N    ??LPLD_UART_Init_13
    113                  {
    114                    x = 3;
   \   00000108   0x2303             MOVS     R3,#+3
    115                    SIM->SCGC4 |= SIM_SCGC4_UART3_MASK;
   \   0000010A   0xF8DE 0x800C      LDR      R8,[LR, #+12]
   \   0000010E   0xF448 0x5800      ORR      R8,R8,#0x2000
   \   00000112   0xF8CE 0x800C      STR      R8,[LR, #+12]
    116                    
    117                    if(tx_pin == PTE4)
   \   00000116   0xF1BC 0x0F80      CMP      R12,#+128
   \   0000011A   0xD104             BNE.N    ??LPLD_UART_Init_14
    118                      PORTE->PCR[4] = PORT_PCR_MUX(3); 
   \   0000011C   0x.... 0x....      LDR.W    R12,??DataTable10_8  ;; 0x4004d000
   \   00000120   0xF8CC 0x6010      STR      R6,[R12, #+16]
   \   00000124   0xE00B             B.N      ??LPLD_UART_Init_15
    119                    else if(tx_pin == PTB11)
   \                     ??LPLD_UART_Init_14: (+1)
   \   00000126   0xF1BC 0x0F2B      CMP      R12,#+43
   \   0000012A   0xD104             BNE.N    ??LPLD_UART_Init_16
    120                      PORTB->PCR[11] = PORT_PCR_MUX(3); 
   \   0000012C   0x.... 0x....      LDR.W    R12,??DataTable10_6  ;; 0x4004a028
   \   00000130   0xF8CC 0x6004      STR      R6,[R12, #+4]
   \   00000134   0xE003             B.N      ??LPLD_UART_Init_15
    121                    else 
    122                      PORTC->PCR[17] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_16: (+1)
   \   00000136   0x.... 0x....      LDR.W    R12,??DataTable10_9  ;; 0x4004b00c
   \   0000013A   0xF8CC 0x6038      STR      R6,[R12, #+56]
    123                    
    124                    if(rx_pin == PTE5)
   \                     ??LPLD_UART_Init_15: (+1)
   \   0000013E   0x2F81             CMP      R7,#+129
   \   00000140   0xD103             BNE.N    ??LPLD_UART_Init_17
    125                      PORTE->PCR[5] = PORT_PCR_MUX(3); 
   \   00000142   0x.... 0x....      LDR.W    R7,??DataTable10_8  ;; 0x4004d000
   \   00000146   0x617E             STR      R6,[R7, #+20]
   \   00000148   0xE048             B.N      ??LPLD_UART_Init_6
    126                    else if(rx_pin == PTB10)
   \                     ??LPLD_UART_Init_17: (+1)
   \   0000014A   0x2F2A             CMP      R7,#+42
   \   0000014C   0xD103             BNE.N    ??LPLD_UART_Init_18
    127                      PORTB->PCR[10] = PORT_PCR_MUX(3); 
   \   0000014E   0x.... 0x....      LDR.W    R7,??DataTable10_6  ;; 0x4004a028
   \   00000152   0x603E             STR      R6,[R7, #+0]
   \   00000154   0xE042             B.N      ??LPLD_UART_Init_6
    128                    else
    129                      PORTC->PCR[16] = PORT_PCR_MUX(3);
   \                     ??LPLD_UART_Init_18: (+1)
   \   00000156   0x.... 0x....      LDR.W    R7,??DataTable10_9  ;; 0x4004b00c
   \   0000015A   0x637E             STR      R6,[R7, #+52]
   \   0000015C   0xE03E             B.N      ??LPLD_UART_Init_6
    130                  }
    131                  else
    132                  {
    133                    if(uartx == UART4)
   \                     ??LPLD_UART_Init_13: (+1)
   \   0000015E   0x.... 0x....      LDR.W    R3,??DataTable10_14  ;; 0x400ea000
   \   00000162   0x4299             CMP      R1,R3
   \   00000164   0xD11C             BNE.N    ??LPLD_UART_Init_19
    134                    {
    135                      x = 4;
   \   00000166   0x2304             MOVS     R3,#+4
    136                      SIM->SCGC1 |= SIM_SCGC1_UART4_MASK;
   \   00000168   0xF8DE 0x8000      LDR      R8,[LR, #+0]
   \   0000016C   0xF448 0x6880      ORR      R8,R8,#0x400
   \   00000170   0xF8CE 0x8000      STR      R8,[LR, #+0]
    137                      
    138                      if(tx_pin == PTE24)
   \   00000174   0xF1BC 0x0F94      CMP      R12,#+148
   \   00000178   0xD104             BNE.N    ??LPLD_UART_Init_20
    139                        PORTE->PCR[24] = PORT_PCR_MUX(3); 
   \   0000017A   0x.... 0x....      LDR.W    R12,??DataTable10_8  ;; 0x4004d000
   \   0000017E   0xF8CC 0x6060      STR      R6,[R12, #+96]
   \   00000182   0xE003             B.N      ??LPLD_UART_Init_21
    140                      else
    141                        PORTC->PCR[15] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_20: (+1)
   \   00000184   0x.... 0x....      LDR.W    R12,??DataTable10_9  ;; 0x4004b00c
   \   00000188   0xF8CC 0x6030      STR      R6,[R12, #+48]
    142                      
    143                      if(rx_pin == PTE25)
   \                     ??LPLD_UART_Init_21: (+1)
   \   0000018C   0x2F95             CMP      R7,#+149
   \   0000018E   0xD103             BNE.N    ??LPLD_UART_Init_22
    144                        PORTE->PCR[25] = PORT_PCR_MUX(3); 
   \   00000190   0x.... 0x....      LDR.W    R7,??DataTable10_8  ;; 0x4004d000
   \   00000194   0x667E             STR      R6,[R7, #+100]
   \   00000196   0xE021             B.N      ??LPLD_UART_Init_6
    145                      else
    146                        PORTC->PCR[14] = PORT_PCR_MUX(3);
   \                     ??LPLD_UART_Init_22: (+1)
   \   00000198   0x.... 0x....      LDR.W    R7,??DataTable10_9  ;; 0x4004b00c
   \   0000019C   0x62FE             STR      R6,[R7, #+44]
   \   0000019E   0xE01D             B.N      ??LPLD_UART_Init_6
    147                    }
    148                    else
    149                    {
    150                      x = 5;
   \                     ??LPLD_UART_Init_19: (+1)
   \   000001A0   0x2305             MOVS     R3,#+5
    151                      uartx = UART5;
   \   000001A2   0x.... 0x....      LDR.W    R1,??DataTable10_15  ;; 0x400eb000
    152                      SIM->SCGC1 |= SIM_SCGC1_UART5_MASK;
   \   000001A6   0xF8DE 0x8000      LDR      R8,[LR, #+0]
   \   000001AA   0xF448 0x6800      ORR      R8,R8,#0x800
   \   000001AE   0xF8CE 0x8000      STR      R8,[LR, #+0]
    153                      
    154                      if(tx_pin == PTD9)
   \   000001B2   0xF1BC 0x0F65      CMP      R12,#+101
   \   000001B6   0xD104             BNE.N    ??LPLD_UART_Init_23
    155                        PORTD->PCR[9] = PORT_PCR_MUX(3); 
   \   000001B8   0x.... 0x....      LDR.W    R12,??DataTable10_12  ;; 0x4004c008
   \   000001BC   0xF8CC 0x601C      STR      R6,[R12, #+28]
   \   000001C0   0xE003             B.N      ??LPLD_UART_Init_24
    156                      else
    157                        PORTE->PCR[8] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_23: (+1)
   \   000001C2   0x.... 0x....      LDR.W    R12,??DataTable10_8  ;; 0x4004d000
   \   000001C6   0xF8CC 0x6020      STR      R6,[R12, #+32]
    158                      
    159                      if(rx_pin == PTD8)
   \                     ??LPLD_UART_Init_24: (+1)
   \   000001CA   0x2F64             CMP      R7,#+100
   \   000001CC   0xD103             BNE.N    ??LPLD_UART_Init_25
    160                        PORTD->PCR[8] = PORT_PCR_MUX(3); 
   \   000001CE   0x.... 0x....      LDR.W    R7,??DataTable10_12  ;; 0x4004c008
   \   000001D2   0x61BE             STR      R6,[R7, #+24]
   \   000001D4   0xE002             B.N      ??LPLD_UART_Init_6
    161                      else
    162                        PORTE->PCR[9] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_25: (+1)
   \   000001D6   0x.... 0x....      LDR.W    R7,??DataTable10_8  ;; 0x4004d000
   \   000001DA   0x627E             STR      R6,[R7, #+36]
    163                    }
    164                  }
    165                }
    166              }
    167            }
    168            
    169            //@@@@@@@@@@@@@@@@@@@@@
    170            uartx->C2 &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK );
   \                     ??LPLD_UART_Init_6: (+1)
   \   000001DC   0x78CE             LDRB     R6,[R1, #+3]
   \   000001DE   0xF006 0x06F3      AND      R6,R6,#0xF3
   \   000001E2   0x70CE             STRB     R6,[R1, #+3]
    171            
    172            //@@UART@ 8@, @@@@@ */
    173            uartx->C1 = 0;	
   \   000001E4   0x2600             MOVS     R6,#+0
   \   000001E6   0x708E             STRB     R6,[R1, #+2]
    174            
    175            //@@@@@
    176            sbr = (uint16)((sysclk)/(baud * 16));
   \   000001E8   0x0100             LSLS     R0,R0,#+4
   \   000001EA   0xFBB5 0xF6F0      UDIV     R6,R5,R0
    177            
    178            //@@UARTx_BDH@@@@@@SBR@@
    179            temp = uartx->BDH & ~(UART_BDH_SBR(0x1F));
   \   000001EE   0x780F             LDRB     R7,[R1, #+0]
   \   000001F0   0xF007 0x07E0      AND      R7,R7,#0xE0
    180            
    181            uartx->BDH = temp |  UART_BDH_SBR(((sbr & 0x1F00) >> 8));
   \   000001F4   0x46B4             MOV      R12,R6
   \   000001F6   0xEA4F 0x2C2C      ASR      R12,R12,#+8
   \   000001FA   0xF00C 0x0C1F      AND      R12,R12,#0x1F
   \   000001FE   0xEA4C 0x0707      ORR      R7,R12,R7
   \   00000202   0x700F             STRB     R7,[R1, #+0]
    182            uartx->BDL = (uint8)(sbr & UART_BDL_SBR_MASK);
   \   00000204   0x704E             STRB     R6,[R1, #+1]
    183            
    184            //@@@@@@@@@@
    185            brfa = (((sysclk*32)/(baud * 16)) - (sbr * 32));
    186            
    187            //@@UARTx_C4@@@@@@BRFA@@
    188            temp = uartx->C4 & ~(UART_C4_BRFA(0x1F));
   \   00000206   0x7A8E             LDRB     R6,[R1, #+10]
   \   00000208   0xF006 0x06E0      AND      R6,R6,#0xE0
    189            
    190            uartx->C4 = temp |  UART_C4_BRFA(brfa);    
   \   0000020C   0x016D             LSLS     R5,R5,#+5
   \   0000020E   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   00000212   0xF000 0x001F      AND      R0,R0,#0x1F
   \   00000216   0x4306             ORRS     R6,R0,R6
   \   00000218   0x728E             STRB     R6,[R1, #+10]
    191            
    192            //@@UART@@DMA@@
    193            if( uart_init_structure.UART_RxDMAEnable == TRUE 
    194              && uart_init_structure.UART_RxIntEnable == TRUE )
   \   0000021A   0xF89D 0x0026      LDRB     R0,[SP, #+38]
   \   0000021E   0xF89D 0x5029      LDRB     R5,[SP, #+41]
   \   00000222   0x2D01             CMP      R5,#+1
   \   00000224   0xD10A             BNE.N    ??LPLD_UART_Init_26
   \   00000226   0x2801             CMP      R0,#+1
   \   00000228   0xD108             BNE.N    ??LPLD_UART_Init_26
    195            {
    196              //@@@@@@@@DMA
    197              uartx->C2 |= UART_C2_RIE_MASK;
   \   0000022A   0x78C8             LDRB     R0,[R1, #+3]
   \   0000022C   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000230   0x70C8             STRB     R0,[R1, #+3]
    198              //@@@@DMA
    199              uartx->C5 |= UART_C5_RDMAS_MASK;
   \   00000232   0x7AC8             LDRB     R0,[R1, #+11]
   \   00000234   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000238   0x72C8             STRB     R0,[R1, #+11]
   \   0000023A   0xE015             B.N      ??LPLD_UART_Init_27
    200            }//@@UART@@@@@@
    201            else if(uart_init_structure.UART_RxIntEnable == TRUE 
    202                  && rx_isr != NULL)
   \                     ??LPLD_UART_Init_26: (+1)
   \   0000023C   0x2801             CMP      R0,#+1
   \   0000023E   0xD10B             BNE.N    ??LPLD_UART_Init_28
   \   00000240   0x0020             MOVS     R0,R4
   \   00000242   0xD009             BEQ.N    ??LPLD_UART_Init_28
    203            {
    204              //@@@@@@
    205              uartx->C2 |= UART_C2_RIE_MASK; 
   \   00000244   0x78C8             LDRB     R0,[R1, #+3]
   \   00000246   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000024A   0x70C8             STRB     R0,[R1, #+3]
    206              UART_R_ISR[x] = rx_isr;
   \   0000024C   0x.... 0x....      LDR.W    R0,??DataTable10_16
   \   00000250   0x461D             MOV      R5,R3
   \   00000252   0xF840 0x4025      STR      R4,[R0, R5, LSL #+2]
   \   00000256   0xE007             B.N      ??LPLD_UART_Init_27
    207            } 
    208            else
    209            {
    210              uartx->C2 &= ~(UART_C2_RIE_MASK); 
   \                     ??LPLD_UART_Init_28: (+1)
   \   00000258   0x78C8             LDRB     R0,[R1, #+3]
   \   0000025A   0xF000 0x00DF      AND      R0,R0,#0xDF
   \   0000025E   0x70C8             STRB     R0,[R1, #+3]
    211              uartx->C5 &= ~(UART_C5_RDMAS_MASK);
   \   00000260   0x7AC8             LDRB     R0,[R1, #+11]
   \   00000262   0xF000 0x00DF      AND      R0,R0,#0xDF
   \   00000266   0x72C8             STRB     R0,[R1, #+11]
    212            }
    213            
    214            //@@UART@@DMA@@
    215            if( uart_init_structure.UART_TxDMAEnable == TRUE 
    216              && uart_init_structure.UART_TxIntEnable == TRUE )
   \                     ??LPLD_UART_Init_27: (+1)
   \   00000268   0xF89D 0x0027      LDRB     R0,[SP, #+39]
   \   0000026C   0xF89D 0x4028      LDRB     R4,[SP, #+40]
   \   00000270   0x2C01             CMP      R4,#+1
   \   00000272   0xD10A             BNE.N    ??LPLD_UART_Init_29
   \   00000274   0x2801             CMP      R0,#+1
   \   00000276   0xD108             BNE.N    ??LPLD_UART_Init_29
    217            {
    218              //@@@@@@@@DMA
    219              uartx->C2 |= UART_C2_TIE_MASK;
   \   00000278   0x78C8             LDRB     R0,[R1, #+3]
   \   0000027A   0xF040 0x0080      ORR      R0,R0,#0x80
   \   0000027E   0x70C8             STRB     R0,[R1, #+3]
    220              //@@@@DMA
    221              uartx->C5 |= UART_C5_TDMAS_MASK;
   \   00000280   0x7AC8             LDRB     R0,[R1, #+11]
   \   00000282   0xF040 0x0080      ORR      R0,R0,#0x80
   \   00000286   0x72C8             STRB     R0,[R1, #+11]
   \   00000288   0xE015             B.N      ??LPLD_UART_Init_30
    222            }//@@UART@@@@@@
    223            else if(uart_init_structure.UART_TxIntEnable == TRUE 
    224                  && tx_isr != NULL)
   \                     ??LPLD_UART_Init_29: (+1)
   \   0000028A   0x2801             CMP      R0,#+1
   \   0000028C   0xD10B             BNE.N    ??LPLD_UART_Init_31
   \   0000028E   0x0010             MOVS     R0,R2
   \   00000290   0xD009             BEQ.N    ??LPLD_UART_Init_31
    225            {
    226              //@@@@@@
    227              uartx->C2 |= UART_C2_TIE_MASK; 
   \   00000292   0x78C8             LDRB     R0,[R1, #+3]
   \   00000294   0xF040 0x0080      ORR      R0,R0,#0x80
   \   00000298   0x70C8             STRB     R0,[R1, #+3]
    228              UART_T_ISR[x] = tx_isr;
   \   0000029A   0x.... 0x....      LDR.W    R0,??DataTable10_16
   \   0000029E   0xEB00 0x0083      ADD      R0,R0,R3, LSL #+2
   \   000002A2   0x6182             STR      R2,[R0, #+24]
   \   000002A4   0xE007             B.N      ??LPLD_UART_Init_30
    229            } 
    230            else
    231            {
    232              uartx->C2 &= ~(UART_C2_TIE_MASK);
   \                     ??LPLD_UART_Init_31: (+1)
   \   000002A6   0x78C8             LDRB     R0,[R1, #+3]
   \   000002A8   0xF000 0x007F      AND      R0,R0,#0x7F
   \   000002AC   0x70C8             STRB     R0,[R1, #+3]
    233              uartx->C5 &= ~(UART_C5_TDMAS_MASK);
   \   000002AE   0x7AC8             LDRB     R0,[R1, #+11]
   \   000002B0   0xF000 0x007F      AND      R0,R0,#0x7F
   \   000002B4   0x72C8             STRB     R0,[R1, #+11]
    234            }
    235            
    236            //@@UART FIFO @@
    237            if( (uartx->C2 & UART_C2_RE_MASK) == 0 
    238               && uart_init_structure.RxFIFO.FIFO_Enable == TRUE)
   \                     ??LPLD_UART_Init_30: (+1)
   \   000002B6   0x78C8             LDRB     R0,[R1, #+3]
   \   000002B8   0x0740             LSLS     R0,R0,#+29
   \   000002BA   0xD423             BMI.N    ??LPLD_UART_Init_32
   \   000002BC   0xF89D 0x002D      LDRB     R0,[SP, #+45]
   \   000002C0   0x2801             CMP      R0,#+1
   \   000002C2   0xD11F             BNE.N    ??LPLD_UART_Init_32
    239            {
    240              //@@ UART @@FIFO
    241              uartx->PFIFO |= UART_PFIFO_RXFE_MASK;
   \   000002C4   0x7C08             LDRB     R0,[R1, #+16]
   \   000002C6   0xF040 0x0008      ORR      R0,R0,#0x8
   \   000002CA   0x7408             STRB     R0,[R1, #+16]
    242              
    243              if(uart_init_structure.RxFIFO.FIFO_BufFlow_IntEnable == TRUE)
   \   000002CC   0xF89D 0x002E      LDRB     R0,[SP, #+46]
   \   000002D0   0x2801             CMP      R0,#+1
   \   000002D2   0xD103             BNE.N    ??LPLD_UART_Init_33
    244              {
    245                uartx->CFIFO |= UART_CFIFO_RXUFE_MASK;
   \   000002D4   0x7C48             LDRB     R0,[R1, #+17]
   \   000002D6   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000002DA   0x7448             STRB     R0,[R1, #+17]
    246              }
    247              
    248              //@@ FIFO buffer @@
    249              len = (uint8)( uartx->PFIFO & UART_PFIFO_RXFIFOSIZE_MASK ) >> UART_PFIFO_RXFIFOSIZE_SHIFT;
   \                     ??LPLD_UART_Init_33: (+1)
   \   000002DC   0x7C08             LDRB     R0,[R1, #+16]
   \   000002DE   0xF010 0x0007      ANDS     R0,R0,#0x7
    250              len = len > 0 ? 1 << (len + 1) : 1;
   \   000002E2   0xD004             BEQ.N    ??LPLD_UART_Init_34
   \   000002E4   0x2201             MOVS     R2,#+1
   \   000002E6   0x1C40             ADDS     R0,R0,#+1
   \   000002E8   0xFA02 0xF000      LSL      R0,R2,R0
   \   000002EC   0xE000             B.N      ??LPLD_UART_Init_35
   \                     ??LPLD_UART_Init_34: (+1)
   \   000002EE   0x2001             MOVS     R0,#+1
    251              //@@Rx FIFO buffer@@DataWords @@@@ UART_FIFOWaterMark
    252              //@@@@@@@DMA@@@@@C2_RIE@C5_RDMAS@@@
    253              if( uart_init_structure.RxFIFO.FIFO_WaterMark > len )
   \                     ??LPLD_UART_Init_35: (+1)
   \   000002F0   0xF89D 0x202F      LDRB     R2,[SP, #+47]
   \   000002F4   0x4603             MOV      R3,R0
   \   000002F6   0x4614             MOV      R4,R2
   \   000002F8   0xB2DB             UXTB     R3,R3
   \   000002FA   0x42A3             CMP      R3,R4
   \   000002FC   0xD201             BCS.N    ??LPLD_UART_Init_36
    254              {
    255                uartx->RWFIFO = UART_RWFIFO_RXWATER(len);
   \   000002FE   0x7548             STRB     R0,[R1, #+21]
   \   00000300   0xE000             B.N      ??LPLD_UART_Init_32
    256              }
    257              else
    258              {
    259                uartx->RWFIFO = UART_RWFIFO_RXWATER(uart_init_structure.RxFIFO.FIFO_WaterMark);
   \                     ??LPLD_UART_Init_36: (+1)
   \   00000302   0x754A             STRB     R2,[R1, #+21]
    260              }  
    261            }
    262            
    263            if( (uartx->C2 & UART_C2_TE_MASK) == 0 
    264               && uart_init_structure.TxFIFO.FIFO_Enable == TRUE)
   \                     ??LPLD_UART_Init_32: (+1)
   \   00000304   0x78C8             LDRB     R0,[R1, #+3]
   \   00000306   0x0700             LSLS     R0,R0,#+28
   \   00000308   0xD424             BMI.N    ??LPLD_UART_Init_37
   \   0000030A   0xF89D 0x002A      LDRB     R0,[SP, #+42]
   \   0000030E   0x2801             CMP      R0,#+1
   \   00000310   0xD120             BNE.N    ??LPLD_UART_Init_37
    265            {
    266              //@@ UART @@FIFO
    267              uartx->PFIFO |= UART_PFIFO_TXFE_MASK;
   \   00000312   0x7C08             LDRB     R0,[R1, #+16]
   \   00000314   0xF040 0x0080      ORR      R0,R0,#0x80
   \   00000318   0x7408             STRB     R0,[R1, #+16]
    268              
    269              if(uart_init_structure.TxFIFO.FIFO_BufFlow_IntEnable == TRUE)
   \   0000031A   0xF89D 0x002B      LDRB     R0,[SP, #+43]
   \   0000031E   0x2801             CMP      R0,#+1
   \   00000320   0xD103             BNE.N    ??LPLD_UART_Init_38
    270              {
    271                uartx->CFIFO |= UART_CFIFO_TXOFE_MASK;
   \   00000322   0x7C48             LDRB     R0,[R1, #+17]
   \   00000324   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000328   0x7448             STRB     R0,[R1, #+17]
    272              }
    273              
    274              //@@ FIFO buffer @@
    275              len = (uint8)( uartx->PFIFO & UART_PFIFO_TXFIFOSIZE_MASK ) >> UART_PFIFO_TXFIFOSIZE_SHIFT;
   \                     ??LPLD_UART_Init_38: (+1)
   \   0000032A   0x7C08             LDRB     R0,[R1, #+16]
   \   0000032C   0xF3C0 0x1002      UBFX     R0,R0,#+4,#+3
    276              len = len > 0 ? 1 << (len + 1) : 1;
   \   00000330   0x0002             MOVS     R2,R0
   \   00000332   0xD004             BEQ.N    ??LPLD_UART_Init_39
   \   00000334   0x2201             MOVS     R2,#+1
   \   00000336   0x1C40             ADDS     R0,R0,#+1
   \   00000338   0xFA02 0xF000      LSL      R0,R2,R0
   \   0000033C   0xE000             B.N      ??LPLD_UART_Init_40
   \                     ??LPLD_UART_Init_39: (+1)
   \   0000033E   0x2001             MOVS     R0,#+1
    277              //@@Tx FIFO buffer@@DataWords @@@@ UART_FIFOWaterMark
    278              //@@@@@@@DMA@@@@@C2_TIE@C5_TDMAS@@@
    279              if( uart_init_structure.TxFIFO.FIFO_WaterMark > len )
   \                     ??LPLD_UART_Init_40: (+1)
   \   00000340   0xF89D 0x202C      LDRB     R2,[SP, #+44]
   \   00000344   0x4603             MOV      R3,R0
   \   00000346   0x4614             MOV      R4,R2
   \   00000348   0xB2DB             UXTB     R3,R3
   \   0000034A   0x42A3             CMP      R3,R4
   \   0000034C   0xD201             BCS.N    ??LPLD_UART_Init_41
    280              {
    281                uartx->TWFIFO = UART_TWFIFO_TXWATER(len);
   \   0000034E   0x74C8             STRB     R0,[R1, #+19]
   \   00000350   0xE000             B.N      ??LPLD_UART_Init_37
    282              }
    283              else
    284              {
    285                uartx->TWFIFO = UART_TWFIFO_TXWATER(uart_init_structure.TxFIFO.FIFO_WaterMark);
   \                     ??LPLD_UART_Init_41: (+1)
   \   00000352   0x74CA             STRB     R2,[R1, #+19]
    286              }
    287            }
    288            //@@ UART @@@
    289            uartx->C2 |= UART_C2_TE_MASK | UART_C2_RE_MASK;  
   \                     ??LPLD_UART_Init_37: (+1)
   \   00000354   0x78C8             LDRB     R0,[R1, #+3]
   \   00000356   0xF040 0x000C      ORR      R0,R0,#0xC
   \   0000035A   0x70C8             STRB     R0,[R1, #+3]
    290          }
   \   0000035C   0xE8BD 0x01F1      POP      {R0,R4-R8}
   \   00000360   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    291          
    292          
    293          /*
    294           * LPLD_UART_RxFIFO_Flush
    295           * @@UART Rx FIFO
    296           * 
    297           * @@:
    298           *    uartx--UART@@@
    299           *      |__UART0          --UART0
    300           *      |__UART1          --UART1
    301           *      |__UART2          --UART2
    302           *      |__UART3          --UART3
    303           *      |__UART4          --UART4
    304           *      |__UART5          --UART5
    305           *
    306           */

   \                                 In section .text, align 2, keep-with-next
    307          void LPLD_UART_RxFIFO_Flush(UART_Type *uartx)
    308          {
    309            //@@@@ FIFO
    310            if( uartx->PFIFO & UART_PFIFO_RXFE_MASK )
   \                     LPLD_UART_RxFIFO_Flush: (+1)
   \   00000000   0x7C01             LDRB     R1,[R0, #+16]
   \   00000002   0x0709             LSLS     R1,R1,#+28
   \   00000004   0xD503             BPL.N    ??LPLD_UART_RxFIFO_Flush_0
    311            {
    312              uartx->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
   \   00000006   0x7C41             LDRB     R1,[R0, #+17]
   \   00000008   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000000C   0x7441             STRB     R1,[R0, #+17]
    313            }
    314          }
   \                     ??LPLD_UART_RxFIFO_Flush_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    315          
    316          /*
    317           * LPLD_UART_TxFIFO_Flush
    318           * @@UART Tx FIFO
    319           * 
    320           * @@:
    321           *    uartx--UART@@@
    322           *      |__UART0          --UART0
    323           *      |__UART1          --UART1
    324           *      |__UART2          --UART2
    325           *      |__UART3          --UART3
    326           *      |__UART4          --UART4
    327           *      |__UART5          --UART5
    328           *
    329           */

   \                                 In section .text, align 2, keep-with-next
    330          void LPLD_UART_TxFIFO_Flush(UART_Type *uartx)
    331          {
    332            //@@@@ FIFO
    333            if( uartx->PFIFO & UART_PFIFO_TXFE_MASK )
   \                     LPLD_UART_TxFIFO_Flush: (+1)
   \   00000000   0x7C01             LDRB     R1,[R0, #+16]
   \   00000002   0x0609             LSLS     R1,R1,#+24
   \   00000004   0xD503             BPL.N    ??LPLD_UART_TxFIFO_Flush_0
    334            {
    335              uartx->CFIFO |= UART_CFIFO_TXFLUSH_MASK;
   \   00000006   0x7C41             LDRB     R1,[R0, #+17]
   \   00000008   0xF041 0x0180      ORR      R1,R1,#0x80
   \   0000000C   0x7441             STRB     R1,[R0, #+17]
    336            }
    337          }
   \                     ??LPLD_UART_TxFIFO_Flush_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    338          
    339          /*
    340           * LPLD_UART_GetChar
    341           * @@@@@@@@@@@@
    342           * 
    343           * @@:
    344           *    uartx--UART@@@
    345           *      |__UART0          --UART0
    346           *      |__UART1          --UART1
    347           *      |__UART2          --UART2
    348           *      |__UART3          --UART3
    349           *      |__UART4          --UART4
    350           *      |__UART5          --UART5
    351           *
    352           * @@:
    353           *    @@@@@1@@@
    354           *
    355           */

   \                                 In section .text, align 2, keep-with-next
    356          int8 LPLD_UART_GetChar(UART_Type *uartx)
    357          {
    358            //@@@@@@
    359            while (!(uartx->S1 & UART_S1_RDRF_MASK));
   \                     LPLD_UART_GetChar: (+1)
   \                     ??LPLD_UART_GetChar_0: (+1)
   \   00000000   0x7901             LDRB     R1,[R0, #+4]
   \   00000002   0x0689             LSLS     R1,R1,#+26
   \   00000004   0xD5FC             BPL.N    ??LPLD_UART_GetChar_0
    360            
    361            //@@@@@1@@@@@
    362            return uartx->D;
   \   00000006   0xF990 0x0007      LDRSB    R0,[R0, #+7]
   \   0000000A   0x4770             BX       LR               ;; return
    363          }
    364          
    365          /********************************************************************/
    366          /*
    367           * LPLD_UART_GetChar_Present
    368           * @@@@@@@@@
    369           * 
    370           * @@:
    371           *    uartx--UART@@@
    372           *      |__UART0          --UART0
    373           *      |__UART1          --UART1
    374           *      |__UART2          --UART2
    375           *      |__UART3          --UART3
    376           *      |__UART4          --UART4
    377           *      |__UART5          --UART5
    378           *
    379           * @@:
    380           *  0       @@@@@@@
    381           *  1       @@@@@@@
    382           */

   \                                 In section .text, align 2, keep-with-next
    383          int32 LPLD_UART_GetChar_Present(UART_Type *uartx)
    384          {
    385              return (uartx->S1 & UART_S1_RDRF_MASK);
   \                     LPLD_UART_GetChar_Present: (+1)
   \   00000000   0x7900             LDRB     R0,[R0, #+4]
   \   00000002   0xF000 0x0020      AND      R0,R0,#0x20
   \   00000006   0x4770             BX       LR               ;; return
    386          }
    387          
    388          /*
    389           * LPLD_UART_PutChar
    390           * @@@@@@@@@@@@
    391           * 
    392           * @@:
    393           *    uartx--UART@@@
    394           *      |__UART0          --UART0
    395           *      |__UART1          --UART1
    396           *      |__UART2          --UART2
    397           *      |__UART3          --UART3
    398           *      |__UART4          --UART4
    399           *      |__UART5          --UART5
    400           *    ch--@@@@1@@@
    401           *
    402           * @@:
    403           *    @
    404           *
    405           */

   \                                 In section .text, align 2, keep-with-next
    406          void LPLD_UART_PutChar(UART_Type *uartx, int8 ch)
    407          {
    408            //@@FIFO@@@@
    409            while(!(uartx->S1 & UART_S1_TDRE_MASK));
   \                     LPLD_UART_PutChar: (+1)
   \                     ??LPLD_UART_PutChar_0: (+1)
   \   00000000   0x7902             LDRB     R2,[R0, #+4]
   \   00000002   0x0612             LSLS     R2,R2,#+24
   \   00000004   0xD5FC             BPL.N    ??LPLD_UART_PutChar_0
    410            
    411            //@@@@@1@@@@@UART@@@@@
    412            uartx->D = (uint8)ch;
   \   00000006   0x71C1             STRB     R1,[R0, #+7]
    413          }
   \   00000008   0x4770             BX       LR               ;; return
    414          
    415          
    416          /*
    417           * LPLD_UART_PutCharArr
    418           * @@@@@@@@@@@@@
    419           * 
    420           * @@:
    421           *    uartx--UART@@@
    422           *      |__UART0          --UART0
    423           *      |__UART1          --UART1
    424           *      |__UART2          --UART2
    425           *      |__UART3          --UART3
    426           *      |__UART4          --UART4
    427           *      |__UART5          --UART5
    428           *    *ch--@@@@@@@@@@@
    429           *    len--@@@@@@
    430           *
    431           * @@:
    432           *    @
    433           *
    434           */

   \                                 In section .text, align 2, keep-with-next
    435          void LPLD_UART_PutCharArr(UART_Type *uartx, int8 *ch, int32 len)
    436          {
   \                     LPLD_UART_PutCharArr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0xE004             B.N      ??LPLD_UART_PutCharArr_0
    437            while(len--)
    438            {
    439              LPLD_UART_PutChar(uartx, *(ch++));
   \                     ??LPLD_UART_PutCharArr_1: (+1)
   \   0000000A   0xF915 0x1B01      LDRSB    R1,[R5], #+1
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       LPLD_UART_PutChar
    440            }
   \                     ??LPLD_UART_PutCharArr_0: (+1)
   \   00000014   0x4630             MOV      R0,R6
   \   00000016   0x1E46             SUBS     R6,R0,#+1
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD1F6             BNE.N    ??LPLD_UART_PutCharArr_1
    441          }
   \   0000001C   0xBD70             POP      {R4-R6,PC}       ;; return
    442          
    443          /*
    444           * LPLD_UART_EnableIrq
    445           * @@@@@@@@@@
    446           * 
    447           * @@:
    448           *    uart_init_structure--UART@@@@@@@
    449           *                        @@@@@UART_InitTypeDef
    450           *
    451           * @@:
    452           *    @
    453           *
    454           */

   \                                 In section .text, align 2, keep-with-next
    455          void LPLD_UART_EnableIrq(UART_InitTypeDef uart_init_structure)
    456          {
   \                     LPLD_UART_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    457            if(uart_init_structure.UART_Uartx == UART0)
   \   00000004   0x....             LDR.N    R1,??DataTable10_3  ;; 0x4006a000
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD106             BNE.N    ??LPLD_UART_EnableIrq_0
    458            {
    459              enable_irq(UART0_RX_TX_IRQn);
   \   0000000A   0x202D             MOVS     R0,#+45
   \   0000000C   0x.... 0x....      BL       __NVIC_EnableIRQ
    460              enable_irq(UART0_ERR_IRQn);
   \   00000010   0x202E             MOVS     R0,#+46
   \   00000012   0x.... 0x....      BL       __NVIC_EnableIRQ
   \   00000016   0xE030             B.N      ??LPLD_UART_EnableIrq_1
    461            }
    462            else if(uart_init_structure.UART_Uartx == UART1)
   \                     ??LPLD_UART_EnableIrq_0: (+1)
   \   00000018   0x....             LDR.N    R1,??DataTable10_7  ;; 0x4006b000
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD106             BNE.N    ??LPLD_UART_EnableIrq_2
    463            {
    464              enable_irq(UART1_RX_TX_IRQn);
   \   0000001E   0x202F             MOVS     R0,#+47
   \   00000020   0x.... 0x....      BL       __NVIC_EnableIRQ
    465              enable_irq(UART1_ERR_IRQn);
   \   00000024   0x2030             MOVS     R0,#+48
   \   00000026   0x.... 0x....      BL       __NVIC_EnableIRQ
   \   0000002A   0xE026             B.N      ??LPLD_UART_EnableIrq_1
    466            }
    467            else if(uart_init_structure.UART_Uartx == UART2)
   \                     ??LPLD_UART_EnableIrq_2: (+1)
   \   0000002C   0x....             LDR.N    R1,??DataTable10_11  ;; 0x4006c000
   \   0000002E   0x4288             CMP      R0,R1
   \   00000030   0xD106             BNE.N    ??LPLD_UART_EnableIrq_3
    468            {
    469              enable_irq(UART2_RX_TX_IRQn);
   \   00000032   0x2031             MOVS     R0,#+49
   \   00000034   0x.... 0x....      BL       __NVIC_EnableIRQ
    470              enable_irq(UART2_ERR_IRQn);
   \   00000038   0x2032             MOVS     R0,#+50
   \   0000003A   0x.... 0x....      BL       __NVIC_EnableIRQ
   \   0000003E   0xE01C             B.N      ??LPLD_UART_EnableIrq_1
    471            }
    472            else if(uart_init_structure.UART_Uartx == UART3)
   \                     ??LPLD_UART_EnableIrq_3: (+1)
   \   00000040   0x....             LDR.N    R1,??DataTable10_13  ;; 0x4006d000
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD106             BNE.N    ??LPLD_UART_EnableIrq_4
    473            {
    474              enable_irq(UART3_RX_TX_IRQn);
   \   00000046   0x2033             MOVS     R0,#+51
   \   00000048   0x.... 0x....      BL       __NVIC_EnableIRQ
    475              enable_irq(UART3_ERR_IRQn);
   \   0000004C   0x2034             MOVS     R0,#+52
   \   0000004E   0x.... 0x....      BL       __NVIC_EnableIRQ
   \   00000052   0xE012             B.N      ??LPLD_UART_EnableIrq_1
    476            }
    477            else if(uart_init_structure.UART_Uartx == UART4)
   \                     ??LPLD_UART_EnableIrq_4: (+1)
   \   00000054   0x....             LDR.N    R1,??DataTable10_14  ;; 0x400ea000
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xD106             BNE.N    ??LPLD_UART_EnableIrq_5
    478            {
    479              enable_irq(UART4_RX_TX_IRQn);
   \   0000005A   0x2035             MOVS     R0,#+53
   \   0000005C   0x.... 0x....      BL       __NVIC_EnableIRQ
    480              enable_irq(UART4_ERR_IRQn);
   \   00000060   0x2036             MOVS     R0,#+54
   \   00000062   0x.... 0x....      BL       __NVIC_EnableIRQ
   \   00000066   0xE008             B.N      ??LPLD_UART_EnableIrq_1
    481            }
    482            else if(uart_init_structure.UART_Uartx == UART5)
   \                     ??LPLD_UART_EnableIrq_5: (+1)
   \   00000068   0x....             LDR.N    R1,??DataTable10_15  ;; 0x400eb000
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xD105             BNE.N    ??LPLD_UART_EnableIrq_1
    483            {
    484              enable_irq(UART5_RX_TX_IRQn);
   \   0000006E   0x2037             MOVS     R0,#+55
   \   00000070   0x.... 0x....      BL       __NVIC_EnableIRQ
    485              enable_irq(UART5_ERR_IRQn);
   \   00000074   0x2038             MOVS     R0,#+56
   \   00000076   0x.... 0x....      BL       __NVIC_EnableIRQ
    486            }
    487          }
   \                     ??LPLD_UART_EnableIrq_1: (+1)
   \   0000007A   0xBC01             POP      {R0}
   \   0000007C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    488          
    489          /*
    490           * LPLD_UART_DisableIrq
    491           * @@@@@@@@@@
    492           * 
    493           * @@:
    494           *    uart_init_structure--UART@@@@@@@
    495           *                        @@@@@UART_InitTypeDef
    496           *
    497           * @@:
    498           *    @
    499           *
    500           */

   \                                 In section .text, align 2, keep-with-next
    501          void LPLD_UART_DisableIrq(UART_InitTypeDef uart_init_structure)
    502          {
   \                     LPLD_UART_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    503            //@@@@@@@@@@@@@
    504            if(uart_init_structure.UART_Uartx == UART0)
   \   00000004   0x....             LDR.N    R1,??DataTable10_3  ;; 0x4006a000
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD106             BNE.N    ??LPLD_UART_DisableIrq_0
    505            {
    506              disable_irq(UART0_RX_TX_IRQn);
   \   0000000A   0x202D             MOVS     R0,#+45
   \   0000000C   0x.... 0x....      BL       __NVIC_DisableIRQ
    507              disable_irq(UART0_ERR_IRQn);
   \   00000010   0x202E             MOVS     R0,#+46
   \   00000012   0x.... 0x....      BL       __NVIC_DisableIRQ
   \   00000016   0xE030             B.N      ??LPLD_UART_DisableIrq_1
    508            }
    509            else if(uart_init_structure.UART_Uartx == UART1)
   \                     ??LPLD_UART_DisableIrq_0: (+1)
   \   00000018   0x....             LDR.N    R1,??DataTable10_7  ;; 0x4006b000
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD106             BNE.N    ??LPLD_UART_DisableIrq_2
    510            {
    511              disable_irq(UART1_RX_TX_IRQn);
   \   0000001E   0x202F             MOVS     R0,#+47
   \   00000020   0x.... 0x....      BL       __NVIC_DisableIRQ
    512              disable_irq(UART1_ERR_IRQn);
   \   00000024   0x2030             MOVS     R0,#+48
   \   00000026   0x.... 0x....      BL       __NVIC_DisableIRQ
   \   0000002A   0xE026             B.N      ??LPLD_UART_DisableIrq_1
    513            }
    514            else if(uart_init_structure.UART_Uartx == UART2)
   \                     ??LPLD_UART_DisableIrq_2: (+1)
   \   0000002C   0x....             LDR.N    R1,??DataTable10_11  ;; 0x4006c000
   \   0000002E   0x4288             CMP      R0,R1
   \   00000030   0xD106             BNE.N    ??LPLD_UART_DisableIrq_3
    515            {
    516              disable_irq(UART2_RX_TX_IRQn);
   \   00000032   0x2031             MOVS     R0,#+49
   \   00000034   0x.... 0x....      BL       __NVIC_DisableIRQ
    517              disable_irq(UART2_ERR_IRQn);
   \   00000038   0x2032             MOVS     R0,#+50
   \   0000003A   0x.... 0x....      BL       __NVIC_DisableIRQ
   \   0000003E   0xE01C             B.N      ??LPLD_UART_DisableIrq_1
    518            }
    519            else if(uart_init_structure.UART_Uartx == UART3)
   \                     ??LPLD_UART_DisableIrq_3: (+1)
   \   00000040   0x....             LDR.N    R1,??DataTable10_13  ;; 0x4006d000
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD106             BNE.N    ??LPLD_UART_DisableIrq_4
    520            {
    521              disable_irq(UART3_RX_TX_IRQn);
   \   00000046   0x2033             MOVS     R0,#+51
   \   00000048   0x.... 0x....      BL       __NVIC_DisableIRQ
    522              disable_irq(UART3_ERR_IRQn);
   \   0000004C   0x2034             MOVS     R0,#+52
   \   0000004E   0x.... 0x....      BL       __NVIC_DisableIRQ
   \   00000052   0xE012             B.N      ??LPLD_UART_DisableIrq_1
    523            }
    524            else if(uart_init_structure.UART_Uartx == UART4)
   \                     ??LPLD_UART_DisableIrq_4: (+1)
   \   00000054   0x....             LDR.N    R1,??DataTable10_14  ;; 0x400ea000
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xD106             BNE.N    ??LPLD_UART_DisableIrq_5
    525            {
    526              disable_irq(UART4_RX_TX_IRQn);
   \   0000005A   0x2035             MOVS     R0,#+53
   \   0000005C   0x.... 0x....      BL       __NVIC_DisableIRQ
    527              disable_irq(UART4_ERR_IRQn);
   \   00000060   0x2036             MOVS     R0,#+54
   \   00000062   0x.... 0x....      BL       __NVIC_DisableIRQ
   \   00000066   0xE008             B.N      ??LPLD_UART_DisableIrq_1
    528            }
    529            else if(uart_init_structure.UART_Uartx == UART5)
   \                     ??LPLD_UART_DisableIrq_5: (+1)
   \   00000068   0x....             LDR.N    R1,??DataTable10_15  ;; 0x400eb000
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xD105             BNE.N    ??LPLD_UART_DisableIrq_1
    530            {
    531              disable_irq(UART5_RX_TX_IRQn);
   \   0000006E   0x2037             MOVS     R0,#+55
   \   00000070   0x.... 0x....      BL       __NVIC_DisableIRQ
    532              disable_irq(UART5_ERR_IRQn);
   \   00000074   0x2038             MOVS     R0,#+56
   \   00000076   0x.... 0x....      BL       __NVIC_DisableIRQ
    533            }
    534          }
   \                     ??LPLD_UART_DisableIrq_1: (+1)
   \   0000007A   0xBC01             POP      {R0}
   \   0000007C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    535          
    536          //HW@@@@@@@@@@@@

   \                                 In section .text, align 2, keep-with-next
    537          void UART0_IRQHandler(void)
    538          {
   \                     UART0_IRQHandler: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    539          #if (UCOS_II > 0u)
    540            OS_CPU_SR  cpu_sr = 0u;
    541            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    542            OSIntEnter();
    543            OS_EXIT_CRITICAL();
    544          #endif
    545            //@@Rx FIFO@@ Under flow
    546            if( UART0->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R4,??DataTable10_17  ;; 0x4006a003
   \   00000004   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD503             BPL.N    ??UART0_IRQHandler_0
    547            {
    548              UART0->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000000C   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000010   0x73E0             STRB     R0,[R4, #+15]
    549            }
    550            //@@Tx FIFO@@ Over flow
    551            if( UART0->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART0_IRQHandler_0: (+1)
   \   00000012   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000014   0x0780             LSLS     R0,R0,#+30
   \   00000016   0xD503             BPL.N    ??UART0_IRQHandler_1
    552            {
    553              UART0->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   00000018   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000001A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001E   0x73E0             STRB     R0,[R4, #+15]
    554            }
    555            //@@@@@@@@
    556            if((UART0->S1 & UART_S1_RDRF_MASK) && (UART0->C2 & UART_C2_RIE_MASK))
   \                     ??UART0_IRQHandler_1: (+1)
   \   00000020   0x7860             LDRB     R0,[R4, #+1]
   \   00000022   0x0680             LSLS     R0,R0,#+26
   \   00000024   0xD505             BPL.N    ??UART0_IRQHandler_2
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x0680             LSLS     R0,R0,#+26
   \   0000002A   0xD502             BPL.N    ??UART0_IRQHandler_2
    557            {
    558              UART_R_ISR[0]();
   \   0000002C   0x....             LDR.N    R0,??DataTable10_16
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x4780             BLX      R0
    559            }
    560            //@@@@@@@@
    561            if((UART0->S1 & UART_S1_TDRE_MASK) && (UART0->C2 & UART_C2_TIE_MASK))
   \                     ??UART0_IRQHandler_2: (+1)
   \   00000032   0x7860             LDRB     R0,[R4, #+1]
   \   00000034   0x0600             LSLS     R0,R0,#+24
   \   00000036   0xD507             BPL.N    ??UART0_IRQHandler_3
   \   00000038   0x7820             LDRB     R0,[R4, #+0]
   \   0000003A   0x0600             LSLS     R0,R0,#+24
   \   0000003C   0xD504             BPL.N    ??UART0_IRQHandler_3
    562            {
    563              UART_T_ISR[0]();
   \   0000003E   0x....             LDR.N    R0,??DataTable10_16
   \   00000040   0x6980             LDR      R0,[R0, #+24]
   \   00000042   0xE8BD 0x4016      POP      {R1,R2,R4,LR}
   \   00000046   0x4700             BX       R0
    564            }
    565            
    566          #if (UCOS_II > 0u)
    567            OSIntExit();          //@@@@@@@@@@@@@@@@@
    568          #endif
    569          }
   \                     ??UART0_IRQHandler_3: (+1)
   \   00000048   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    570          
    571          //HW@@@@@@@@@@@@

   \                                 In section .text, align 2, keep-with-next
    572          void UART1_IRQHandler(void)
    573          {
   \                     UART1_IRQHandler: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    574          #if (UCOS_II > 0u)
    575            OS_CPU_SR  cpu_sr = 0u;
    576            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    577            OSIntEnter();
    578            OS_EXIT_CRITICAL();
    579          #endif
    580            //@@Rx FIFO@@ Under flow
    581            if( UART1->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R4,??DataTable10_18  ;; 0x4006b003
   \   00000004   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD503             BPL.N    ??UART1_IRQHandler_0
    582            {
    583              UART1->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000000C   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000010   0x73E0             STRB     R0,[R4, #+15]
    584            }
    585            //@@Tx FIFO@@ Over flow
    586            if( UART1->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART1_IRQHandler_0: (+1)
   \   00000012   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000014   0x0780             LSLS     R0,R0,#+30
   \   00000016   0xD503             BPL.N    ??UART1_IRQHandler_1
    587            {
    588              UART1->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   00000018   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000001A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001E   0x73E0             STRB     R0,[R4, #+15]
    589            }  
    590            //@@@@@@@@
    591            if((UART1->S1 & UART_S1_RDRF_MASK) && (UART1->C2 & UART_C2_RIE_MASK))
   \                     ??UART1_IRQHandler_1: (+1)
   \   00000020   0x7860             LDRB     R0,[R4, #+1]
   \   00000022   0x0680             LSLS     R0,R0,#+26
   \   00000024   0xD505             BPL.N    ??UART1_IRQHandler_2
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x0680             LSLS     R0,R0,#+26
   \   0000002A   0xD502             BPL.N    ??UART1_IRQHandler_2
    592            {
    593              UART_R_ISR[1]();
   \   0000002C   0x....             LDR.N    R0,??DataTable10_16
   \   0000002E   0x6840             LDR      R0,[R0, #+4]
   \   00000030   0x4780             BLX      R0
    594            }
    595            //@@@@@@@@
    596            if((UART1->S1 & UART_S1_TDRE_MASK) && (UART1->C2 & UART_C2_TIE_MASK))
   \                     ??UART1_IRQHandler_2: (+1)
   \   00000032   0x7860             LDRB     R0,[R4, #+1]
   \   00000034   0x0600             LSLS     R0,R0,#+24
   \   00000036   0xD507             BPL.N    ??UART1_IRQHandler_3
   \   00000038   0x7820             LDRB     R0,[R4, #+0]
   \   0000003A   0x0600             LSLS     R0,R0,#+24
   \   0000003C   0xD504             BPL.N    ??UART1_IRQHandler_3
    597            {
    598              UART_T_ISR[1]();
   \   0000003E   0x....             LDR.N    R0,??DataTable10_16
   \   00000040   0x69C0             LDR      R0,[R0, #+28]
   \   00000042   0xE8BD 0x4016      POP      {R1,R2,R4,LR}
   \   00000046   0x4700             BX       R0
    599            }
    600            
    601          #if (UCOS_II > 0u)
    602            OSIntExit();          //@@@@@@@@@@@@@@@@@
    603          #endif
    604          }
   \                     ??UART1_IRQHandler_3: (+1)
   \   00000048   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    605          
    606          //HW@@@@@@@@@@@@

   \                                 In section .text, align 2, keep-with-next
    607          void UART2_IRQHandler(void)
    608          {
   \                     UART2_IRQHandler: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    609          #if (UCOS_II > 0u)
    610            OS_CPU_SR  cpu_sr = 0u;
    611            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    612            OSIntEnter();
    613            OS_EXIT_CRITICAL();
    614          #endif
    615            //@@Rx FIFO@@ Under flow
    616            if( UART2->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R4,??DataTable10_19  ;; 0x4006c003
   \   00000004   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD503             BPL.N    ??UART2_IRQHandler_0
    617            {
    618              UART2->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000000C   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000010   0x73E0             STRB     R0,[R4, #+15]
    619            }
    620            //@@Tx FIFO@@ Over flow
    621            if( UART2->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART2_IRQHandler_0: (+1)
   \   00000012   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000014   0x0780             LSLS     R0,R0,#+30
   \   00000016   0xD503             BPL.N    ??UART2_IRQHandler_1
    622            {
    623              UART2->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   00000018   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000001A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001E   0x73E0             STRB     R0,[R4, #+15]
    624            }    
    625            //@@@@@@@@
    626            if((UART2->S1 & UART_S1_RDRF_MASK) && (UART2->C2 & UART_C2_RIE_MASK))
   \                     ??UART2_IRQHandler_1: (+1)
   \   00000020   0x7860             LDRB     R0,[R4, #+1]
   \   00000022   0x0680             LSLS     R0,R0,#+26
   \   00000024   0xD505             BPL.N    ??UART2_IRQHandler_2
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x0680             LSLS     R0,R0,#+26
   \   0000002A   0xD502             BPL.N    ??UART2_IRQHandler_2
    627            {
    628              UART_R_ISR[2]();
   \   0000002C   0x....             LDR.N    R0,??DataTable10_16
   \   0000002E   0x6880             LDR      R0,[R0, #+8]
   \   00000030   0x4780             BLX      R0
    629            }
    630            //@@@@@@@@
    631            if((UART2->S1 & UART_S1_TDRE_MASK) && (UART2->C2 & UART_C2_TIE_MASK))
   \                     ??UART2_IRQHandler_2: (+1)
   \   00000032   0x7860             LDRB     R0,[R4, #+1]
   \   00000034   0x0600             LSLS     R0,R0,#+24
   \   00000036   0xD507             BPL.N    ??UART2_IRQHandler_3
   \   00000038   0x7820             LDRB     R0,[R4, #+0]
   \   0000003A   0x0600             LSLS     R0,R0,#+24
   \   0000003C   0xD504             BPL.N    ??UART2_IRQHandler_3
    632            {
    633              UART_T_ISR[2]();
   \   0000003E   0x....             LDR.N    R0,??DataTable10_16
   \   00000040   0x6A00             LDR      R0,[R0, #+32]
   \   00000042   0xE8BD 0x4016      POP      {R1,R2,R4,LR}
   \   00000046   0x4700             BX       R0
    634            }
    635            
    636          #if (UCOS_II > 0u)
    637            OSIntExit();          //@@@@@@@@@@@@@@@@@
    638          #endif
    639          }
   \                     ??UART2_IRQHandler_3: (+1)
   \   00000048   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    640          
    641          //HW@@@@@@@@@@@@

   \                                 In section .text, align 2, keep-with-next
    642          void UART3_IRQHandler(void)
    643          {
   \                     UART3_IRQHandler: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    644          #if (UCOS_II > 0u)
    645            OS_CPU_SR  cpu_sr = 0u;
    646            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    647            OSIntEnter();
    648            OS_EXIT_CRITICAL();
    649          #endif
    650            //@@Rx FIFO@@ Under flow
    651            if( UART3->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R4,??DataTable10_20  ;; 0x4006d003
   \   00000004   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD503             BPL.N    ??UART3_IRQHandler_0
    652            {
    653              UART3->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000000C   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000010   0x73E0             STRB     R0,[R4, #+15]
    654            }
    655            //@@Tx FIFO@@ Over flow
    656            if( UART3->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART3_IRQHandler_0: (+1)
   \   00000012   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000014   0x0780             LSLS     R0,R0,#+30
   \   00000016   0xD503             BPL.N    ??UART3_IRQHandler_1
    657            {
    658              UART3->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   00000018   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000001A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001E   0x73E0             STRB     R0,[R4, #+15]
    659            }   
    660            //@@@@@@@@
    661            if((UART3->S1 & UART_S1_RDRF_MASK) && (UART3->C2 & UART_C2_RIE_MASK))
   \                     ??UART3_IRQHandler_1: (+1)
   \   00000020   0x7860             LDRB     R0,[R4, #+1]
   \   00000022   0x0680             LSLS     R0,R0,#+26
   \   00000024   0xD505             BPL.N    ??UART3_IRQHandler_2
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x0680             LSLS     R0,R0,#+26
   \   0000002A   0xD502             BPL.N    ??UART3_IRQHandler_2
    662            {
    663              UART_R_ISR[3]();
   \   0000002C   0x....             LDR.N    R0,??DataTable10_16
   \   0000002E   0x68C0             LDR      R0,[R0, #+12]
   \   00000030   0x4780             BLX      R0
    664            }
    665            //@@@@@@@@
    666            if((UART3->S1 & UART_S1_TDRE_MASK) && (UART3->C2 & UART_C2_TIE_MASK))
   \                     ??UART3_IRQHandler_2: (+1)
   \   00000032   0x7860             LDRB     R0,[R4, #+1]
   \   00000034   0x0600             LSLS     R0,R0,#+24
   \   00000036   0xD507             BPL.N    ??UART3_IRQHandler_3
   \   00000038   0x7820             LDRB     R0,[R4, #+0]
   \   0000003A   0x0600             LSLS     R0,R0,#+24
   \   0000003C   0xD504             BPL.N    ??UART3_IRQHandler_3
    667            {
    668              UART_T_ISR[3]();
   \   0000003E   0x....             LDR.N    R0,??DataTable10_16
   \   00000040   0x6A40             LDR      R0,[R0, #+36]
   \   00000042   0xE8BD 0x4016      POP      {R1,R2,R4,LR}
   \   00000046   0x4700             BX       R0
    669            }
    670            
    671          #if (UCOS_II > 0u)
    672            OSIntExit();          //@@@@@@@@@@@@@@@@@
    673          #endif
    674          }
   \                     ??UART3_IRQHandler_3: (+1)
   \   00000048   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    675          
    676          //HW@@@@@@@@@@@@

   \                                 In section .text, align 2, keep-with-next
    677          void UART4_IRQHandler(void)
    678          {
   \                     UART4_IRQHandler: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    679          #if (UCOS_II > 0u)
    680            OS_CPU_SR  cpu_sr = 0u;
    681            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    682            OSIntEnter();
    683            OS_EXIT_CRITICAL();
    684          #endif
    685            //@@Rx FIFO@@ Under flow
    686            if( UART4->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R4,??DataTable10_21  ;; 0x400ea003
   \   00000004   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD503             BPL.N    ??UART4_IRQHandler_0
    687            {
    688              UART4->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000000C   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000010   0x73E0             STRB     R0,[R4, #+15]
    689            }
    690            //@@Tx FIFO@@ Over flow
    691            if( UART4->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART4_IRQHandler_0: (+1)
   \   00000012   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000014   0x0780             LSLS     R0,R0,#+30
   \   00000016   0xD503             BPL.N    ??UART4_IRQHandler_1
    692            {
    693              UART4->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   00000018   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000001A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001E   0x73E0             STRB     R0,[R4, #+15]
    694            }  
    695            //@@@@@@@@
    696            if((UART4->S1 & UART_S1_RDRF_MASK) && (UART4->C2 & UART_C2_RIE_MASK))
   \                     ??UART4_IRQHandler_1: (+1)
   \   00000020   0x7860             LDRB     R0,[R4, #+1]
   \   00000022   0x0680             LSLS     R0,R0,#+26
   \   00000024   0xD505             BPL.N    ??UART4_IRQHandler_2
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x0680             LSLS     R0,R0,#+26
   \   0000002A   0xD502             BPL.N    ??UART4_IRQHandler_2
    697            {
    698              UART_R_ISR[4]();
   \   0000002C   0x....             LDR.N    R0,??DataTable10_16
   \   0000002E   0x6900             LDR      R0,[R0, #+16]
   \   00000030   0x4780             BLX      R0
    699            }
    700            //@@@@@@@@
    701            if((UART4->S1 & UART_S1_TDRE_MASK) && (UART4->C2 & UART_C2_TIE_MASK))
   \                     ??UART4_IRQHandler_2: (+1)
   \   00000032   0x7860             LDRB     R0,[R4, #+1]
   \   00000034   0x0600             LSLS     R0,R0,#+24
   \   00000036   0xD507             BPL.N    ??UART4_IRQHandler_3
   \   00000038   0x7820             LDRB     R0,[R4, #+0]
   \   0000003A   0x0600             LSLS     R0,R0,#+24
   \   0000003C   0xD504             BPL.N    ??UART4_IRQHandler_3
    702            {
    703              UART_T_ISR[4]();
   \   0000003E   0x....             LDR.N    R0,??DataTable10_16
   \   00000040   0x6A80             LDR      R0,[R0, #+40]
   \   00000042   0xE8BD 0x4016      POP      {R1,R2,R4,LR}
   \   00000046   0x4700             BX       R0
    704            }
    705            
    706          #if (UCOS_II > 0u)
    707            OSIntExit();          //@@@@@@@@@@@@@@@@@
    708          #endif
    709          }
   \                     ??UART4_IRQHandler_3: (+1)
   \   00000048   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    710          
    711          //HW@@@@@@@@@@@@

   \                                 In section .text, align 2, keep-with-next
    712          void UART5_IRQHandler(void)
    713          {
   \                     UART5_IRQHandler: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    714          #if (UCOS_II > 0u)
    715            OS_CPU_SR  cpu_sr = 0u;
    716            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    717            OSIntEnter();
    718            OS_EXIT_CRITICAL();
    719          #endif
    720            //@@Rx FIFO@@ Under flow
    721            if( UART5->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R4,??DataTable10_22  ;; 0x400eb003
   \   00000004   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD503             BPL.N    ??UART5_IRQHandler_0
    722            {
    723              UART5->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000000C   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000010   0x73E0             STRB     R0,[R4, #+15]
    724            }
    725            //@@Tx FIFO@@ Over flow
    726            if( UART5->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART5_IRQHandler_0: (+1)
   \   00000012   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000014   0x0780             LSLS     R0,R0,#+30
   \   00000016   0xD503             BPL.N    ??UART5_IRQHandler_1
    727            {
    728              UART5->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   00000018   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000001A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001E   0x73E0             STRB     R0,[R4, #+15]
    729            }   
    730            //@@@@@@@@
    731            if((UART5->S1 & UART_S1_RDRF_MASK) && (UART5->C2 & UART_C2_RIE_MASK))
   \                     ??UART5_IRQHandler_1: (+1)
   \   00000020   0x7860             LDRB     R0,[R4, #+1]
   \   00000022   0x0680             LSLS     R0,R0,#+26
   \   00000024   0xD505             BPL.N    ??UART5_IRQHandler_2
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x0680             LSLS     R0,R0,#+26
   \   0000002A   0xD502             BPL.N    ??UART5_IRQHandler_2
    732            {
    733              UART_R_ISR[5]();
   \   0000002C   0x....             LDR.N    R0,??DataTable10_16
   \   0000002E   0x6940             LDR      R0,[R0, #+20]
   \   00000030   0x4780             BLX      R0
    734            }
    735            //@@@@@@@@
    736            if((UART5->S1 & UART_S1_TDRE_MASK) && (UART5->C2 & UART_C2_TIE_MASK))
   \                     ??UART5_IRQHandler_2: (+1)
   \   00000032   0x7860             LDRB     R0,[R4, #+1]
   \   00000034   0x0600             LSLS     R0,R0,#+24
   \   00000036   0xD507             BPL.N    ??UART5_IRQHandler_3
   \   00000038   0x7820             LDRB     R0,[R4, #+0]
   \   0000003A   0x0600             LSLS     R0,R0,#+24
   \   0000003C   0xD504             BPL.N    ??UART5_IRQHandler_3
    737            {
    738              UART_T_ISR[5]();
   \   0000003E   0x....             LDR.N    R0,??DataTable10_16
   \   00000040   0x6AC0             LDR      R0,[R0, #+44]
   \   00000042   0xE8BD 0x4016      POP      {R1,R2,R4,LR}
   \   00000046   0x4700             BX       R0
    739            }
    740            
    741          #if (UCOS_II > 0u)
    742            OSIntExit();          //@@@@@@@@@@@@@@@@@
    743          #endif
    744          }
   \                     ??UART5_IRQHandler_3: (+1)
   \   00000048   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    745          

   \                                 In section .text, align 2, keep-with-next
    746          void UART0_ERR_IRQHandler(void)
    747          {
    748          }
   \                     UART0_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    749          

   \                                 In section .text, align 2, keep-with-next
    750          void UART1_ERR_IRQHandler(void)
    751          {
    752          }
   \                     UART1_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    753          

   \                                 In section .text, align 2, keep-with-next
    754          void UART2_ERR_IRQHandler(void)
    755          {
    756          }
   \                     UART2_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    757          

   \                                 In section .text, align 2, keep-with-next
    758          void UART3_ERR_IRQHandler(void)
    759          {
    760          }
   \                     UART3_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    761          

   \                                 In section .text, align 2, keep-with-next
    762          void UART4_ERR_IRQHandler(void)
    763          {
    764          }
   \                     UART4_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    765          

   \                                 In section .text, align 2, keep-with-next
    766          void UART5_ERR_IRQHandler(void)
    767          {
    768          }
   \                     UART5_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x40048028         DC32     0x40048028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     g_core_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x40049004         DC32     0x40049004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x4004A028         DC32     0x4004a028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x4006B000         DC32     0x4006b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x4006C000         DC32     0x4006c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x4004C008         DC32     0x4004c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x4006D000         DC32     0x4006d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x400EB000         DC32     0x400eb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x........         DC32     UART_R_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x4006A003         DC32     0x4006a003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x4006B003         DC32     0x4006b003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x4006C003         DC32     0x4006c003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_20:
   \   00000000   0x4006D003         DC32     0x4006d003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_21:
   \   00000000   0x400EA003         DC32     0x400ea003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_22:
   \   00000000   0x400EB003         DC32     0x400eb003
    769          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   LPLD_UART_DisableIrq
        24   -> __NVIC_DisableIRQ
      24   LPLD_UART_EnableIrq
        24   -> __NVIC_EnableIRQ
       0   LPLD_UART_GetChar
       0   LPLD_UART_GetChar_Present
      44   LPLD_UART_Init
       0   LPLD_UART_PutChar
      16   LPLD_UART_PutCharArr
        16   -> LPLD_UART_PutChar
       0   LPLD_UART_RxFIFO_Flush
       0   LPLD_UART_TxFIFO_Flush
       0   UART0_ERR_IRQHandler
      16   UART0_IRQHandler
         0   -- Indirect call
        16   -- Indirect call
       0   UART1_ERR_IRQHandler
      16   UART1_IRQHandler
         0   -- Indirect call
        16   -- Indirect call
       0   UART2_ERR_IRQHandler
      16   UART2_IRQHandler
         0   -- Indirect call
        16   -- Indirect call
       0   UART3_ERR_IRQHandler
      16   UART3_IRQHandler
         0   -- Indirect call
        16   -- Indirect call
       0   UART4_ERR_IRQHandler
      16   UART4_IRQHandler
         0   -- Indirect call
        16   -- Indirect call
       0   UART5_ERR_IRQHandler
      16   UART5_IRQHandler
         0   -- Indirect call
        16   -- Indirect call
       0   __NVIC_DisableIRQ
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_20
       4  ??DataTable10_21
       4  ??DataTable10_22
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
     128  LPLD_UART_DisableIrq
     128  LPLD_UART_EnableIrq
      12  LPLD_UART_GetChar
       8  LPLD_UART_GetChar_Present
     868  LPLD_UART_Init
      10  LPLD_UART_PutChar
      30  LPLD_UART_PutCharArr
      16  LPLD_UART_RxFIFO_Flush
      16  LPLD_UART_TxFIFO_Flush
       2  UART0_ERR_IRQHandler
      74  UART0_IRQHandler
       2  UART1_ERR_IRQHandler
      74  UART1_IRQHandler
       2  UART2_ERR_IRQHandler
      74  UART2_IRQHandler
       2  UART3_ERR_IRQHandler
      74  UART3_IRQHandler
       2  UART4_ERR_IRQHandler
      74  UART4_IRQHandler
       2  UART5_ERR_IRQHandler
      74  UART5_IRQHandler
      48  UART_R_ISR
          UART_T_ISR
      26  __NVIC_DisableIRQ
      26  __NVIC_EnableIRQ

 
    48 bytes in section .bss
 1 816 bytes in section .text
 
 1 816 bytes of CODE memory
    48 bytes of DATA memory

Errors: none
Warnings: 1
