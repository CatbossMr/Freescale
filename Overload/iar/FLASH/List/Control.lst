###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.2.14835/W32 for ARM       08/Jun/2018  18:03:57
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\app\Control.c
#    Command line =  
#        -f C:\Users\JoyC\AppData\Local\Temp\EWD774.tmp
#        (D:\workspace\LPLD_OSKinetis_V3\project\Overload3\app\Control.c -D
#        LPLD_K60 -D USE_K60DZ10 -lCN
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\List -lB
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\List -o
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "D:\Program Files\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\app\ -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\CPU\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\common\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\HW\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\FatFs\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\FatFs\option\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\common\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\driver\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\descriptor\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\..\..\..\lib\USB\class\
#        -Om -I "D:\Program Files\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\List\Control.lst
#    Object file  =  
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload3\iar\FLASH\Obj\Control.o
#
###############################################################################

D:\workspace\LPLD_OSKinetis_V3\project\Overload3\app\Control.c
      1          #include "include.h"
      2          
      3          
      4          /*  @@@@   */

   \                                 In section .bss, align 4
      5          FTM_InitTypeDef motor_PWM_init_struct;
   \                     motor_PWM_init_struct:
   \   00000000                      DS8 28

   \                                 In section .text, align 2, keep-with-next
      6          void Motor_Init(void)
      7          {
   \                     Motor_Init: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
      8            motor_PWM_init_struct.FTM_Ftmx=FTM0;
   \   00000002   0x....             LDR.N    R1,??DataTable4
   \   00000004   0x....             LDR.N    R4,??DataTable4_1  ;; 0x40038000
   \   00000006   0x600C             STR      R4,[R1, #+0]
      9            motor_PWM_init_struct.FTM_Mode= FTM_MODE_PWM;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x7108             STRB     R0,[R1, #+4]
     10            motor_PWM_init_struct.FTM_PwmFreq=10000;
   \   0000000C   0xF242 0x7010      MOVW     R0,#+10000
   \   00000010   0x6088             STR      R0,[R1, #+8]
     11            LPLD_FTM_Init(motor_PWM_init_struct);
   \   00000012   0xB084             SUB      SP,SP,#+16
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x221C             MOVS     R2,#+28
   \   00000018   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001C   0xBC0F             POP      {R0-R3}
   \   0000001E   0x.... 0x....      BL       LPLD_FTM_Init
     12            
     13            LPLD_FTM_PWM_Enable(FTM0, FTM_Ch0, 0,PTC1,ALIGN_LEFT);
   \   00000022   0x2028             MOVS     R0,#+40
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x233D             MOVS     R3,#+61
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0x4611             MOV      R1,R2
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     14            LPLD_FTM_PWM_Enable(FTM0, FTM_Ch1, 480,PTC2,ALIGN_LEFT);
   \   00000032   0x2028             MOVS     R0,#+40
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0x233E             MOVS     R3,#+62
   \   00000038   0xF44F 0x72F0      MOV      R2,#+480
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     15            Motor_Drive(1300);
   \   00000044   0xF240 0x5014      MOVW     R0,#+1300
   \   00000048   0xB004             ADD      SP,SP,#+16
   \   0000004A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000004E                      REQUIRE Motor_Drive
   \   0000004E                      ;; // Fall through to label Motor_Drive
     16          }
     17          
     18          

   \                                 In section .text, align 2, keep-with-next
     19          void Motor_Drive(int16 duty)
     20          {
   \                     Motor_Drive: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     21            /*@@and@@@@@@@@*/
     22            if(duty>=0)
   \   00000004   0xD412             BMI.N    ??Motor_Drive_0
     23            {
     24              duty=duty>1700?1700:duty;
   \   00000006   0xF240 0x61A5      MOVW     R1,#+1701
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xDB01             BLT.N    ??Motor_Drive_1
   \   0000000E   0xF240 0x64A4      MOVW     R4,#+1700
     25              LPLD_FTM_PWM_ChangeDuty(FTM0,FTM_Ch0,0);
   \                     ??Motor_Drive_1: (+1)
   \   00000012   0x....             LDR.N    R5,??DataTable4_1  ;; 0x40038000
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x4611             MOV      R1,R2
   \   00000018   0x4628             MOV      R0,R5
   \   0000001A   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     26              LPLD_FTM_PWM_ChangeDuty(FTM0,FTM_Ch1,duty);  
   \   0000001E   0x4622             MOV      R2,R4
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000028   0x.... 0x....      B.W      LPLD_FTM_PWM_ChangeDuty
     27            }else{
     28              duty=abs(duty);
   \                     ??Motor_Drive_0: (+1)
   \   0000002C   0x.... 0x....      BL       abs
   \   00000030   0x4602             MOV      R2,R0
     29              duty=duty>2000?2000:duty;
   \   00000032   0xB200             SXTH     R0,R0
   \   00000034   0xF240 0x71D1      MOVW     R1,#+2001
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xDB01             BLT.N    ??Motor_Drive_2
   \   0000003C   0xF44F 0x62FA      MOV      R2,#+2000
     30              LPLD_FTM_PWM_ChangeDuty(FTM0,FTM_Ch0,duty);
   \                     ??Motor_Drive_2: (+1)
   \   00000040   0x....             LDR.N    R4,??DataTable4_1  ;; 0x40038000
   \   00000042   0xB212             SXTH     R2,R2
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     31              LPLD_FTM_PWM_ChangeDuty(FTM0,FTM_Ch1,0);  
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000056   0x.... 0x....      B.W      LPLD_FTM_PWM_ChangeDuty
     32            }
     33          }
     34          
     35          
     36          /*  @@@@   */

   \                                 In section .bss, align 4
     37          FTM_InitTypeDef server_PWM_init_struct;
   \                     server_PWM_init_struct:
   \   00000000                      DS8 28

   \                                 In section .text, align 2, keep-with-next
     38          void Server_Init(void)
     39          {
   \                     Server_Init: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
     40            server_PWM_init_struct.FTM_Ftmx=FTM2;
   \   00000002   0x....             LDR.N    R1,??DataTable4_2
   \   00000004   0x....             LDR.N    R4,??DataTable4_3  ;; 0x400b8000
   \   00000006   0x600C             STR      R4,[R1, #+0]
     41            server_PWM_init_struct.FTM_Mode=FTM_MODE_PWM;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x7108             STRB     R0,[R1, #+4]
     42            server_PWM_init_struct.FTM_PwmFreq=Server_PWM_FREQ;
   \   0000000C   0x2032             MOVS     R0,#+50
   \   0000000E   0x6088             STR      R0,[R1, #+8]
     43            
     44            LPLD_FTM_Init(server_PWM_init_struct);
   \   00000010   0xB084             SUB      SP,SP,#+16
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x221C             MOVS     R2,#+28
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001A   0xBC0F             POP      {R0-R3}
   \   0000001C   0x.... 0x....      BL       LPLD_FTM_Init
     45            // FTM2 ch1@@@@@@,B19@@@@@@
     46            LPLD_FTM_PWM_Enable(FTM2,FTM_Ch1,Server_PWM_MIDDLE,PTB19,ALIGN_LEFT); 
   \   00000020   0xF240 0x25DA      MOVW     R5,#+730
   \   00000024   0x2028             MOVS     R0,#+40
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x2333             MOVS     R3,#+51
   \   0000002A   0x462A             MOV      R2,R5
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     47            Server_Drive(Server_PWM_MIDDLE);
   \   00000034   0x4628             MOV      R0,R5
   \   00000036   0xE8BD 0x403E      POP      {R1-R5,LR}
   \   0000003A                      REQUIRE Server_Drive
   \   0000003A                      ;; // Fall through to label Server_Drive
     48          }
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void Server_Drive(uint32 duty)
     51          {
   \                     Server_Drive: (+1)
   \   00000000   0x4602             MOV      R2,R0
     52            if(duty < Server_PWM_LEFT_MAX) duty = Server_PWM_LEFT_MAX;
   \   00000002   0xF5B2 0x7FF5      CMP      R2,#+490
   \   00000006   0xD201             BCS.N    ??Server_Drive_0
   \   00000008   0xF44F 0x72F5      MOV      R2,#+490
     53            if(duty > Server_PWM_RIGHT_MAX) duty = Server_PWM_RIGHT_MAX;
   \                     ??Server_Drive_0: (+1)
   \   0000000C   0xF240 0x30CA      MOVW     R0,#+970
   \   00000010   0x4282             CMP      R2,R0
   \   00000012   0xD900             BLS.N    ??Server_Drive_1
   \   00000014   0x4602             MOV      R2,R0
     54            LPLD_FTM_PWM_ChangeDuty(FTM2,FTM_Ch1,duty);
   \                     ??Server_Drive_1: (+1)
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x....             LDR.N    R0,??DataTable4_3  ;; 0x400b8000
   \   0000001A   0x.... 0x....      B.W      LPLD_FTM_PWM_ChangeDuty
     55          }
     56          
     57          /*  @@@@@   */
     58          

   \                                 In section .bss, align 4
     59          int32 QD_Interval=0;
   \                     QD_Interval:
   \   00000000                      DS8 4
     60          int32 QD_Result=0;
   \                     QD_Result:
   \   00000004                      DS8 4
     61          int32 Last_QD_Result=0;
   \                     Last_QD_Result:
   \   00000008                      DS8 4
     62          
     63          // FTM@@@

   \                                 In section .bss, align 4
     64          FTM_InitTypeDef encoder_pwm_init_struct;
   \                     encoder_pwm_init_struct:
   \   00000000                      DS8 28

   \                                 In section .text, align 2, keep-with-next
     65          void Encoder_PWM_Init(void)
     66          {
   \                     Encoder_PWM_Init: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
     67            encoder_pwm_init_struct.FTM_Ftmx = FTM1;
   \   00000002   0x....             LDR.N    R1,??DataTable4_4
   \   00000004   0x....             LDR.N    R4,??DataTable4_5  ;; 0x40039000
   \   00000006   0x600C             STR      R4,[R1, #+0]
     68            encoder_pwm_init_struct.FTM_Mode = FTM_MODE_QD;
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x7108             STRB     R0,[R1, #+4]
     69            encoder_pwm_init_struct.FTM_QdMode = QD_MODE_CNTDIR;
   \   0000000C   0x2008             MOVS     R0,#+8
   \   0000000E   0x7488             STRB     R0,[R1, #+18]
     70            LPLD_FTM_Init(encoder_pwm_init_struct);
   \   00000010   0xB084             SUB      SP,SP,#+16
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x221C             MOVS     R2,#+28
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001A   0xBC0F             POP      {R0-R3}
   \   0000001C   0x.... 0x....      BL       LPLD_FTM_Init
     71            LPLD_FTM_QD_Enable(FTM1,PTA12,PTA13);
   \   00000020   0x220D             MOVS     R2,#+13
   \   00000022   0x210C             MOVS     R1,#+12
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0xB004             ADD      SP,SP,#+16
   \   00000028   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002C   0x.... 0x....      B.W      LPLD_FTM_QD_Enable
     72          }
     73          
     74          //@@@@

   \                                 In section .text, align 2, keep-with-next
     75          void pit_isr0(void)
     76          {
   \                     pit_isr0: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     77            QD_Result  =  LPLD_FTM_GetCounter(FTM1);
   \   00000002   0x....             LDR.N    R4,??DataTable4_6
   \   00000004   0x....             LDR.N    R0,??DataTable4_5  ;; 0x40039000
   \   00000006   0x.... 0x....      BL       LPLD_FTM_GetCounter
   \   0000000A   0x6060             STR      R0,[R4, #+4]
     78            
     79            if(QD_Result<=Last_QD_Result)
   \   0000000C   0x68A0             LDR      R0,[R4, #+8]
   \   0000000E   0x6861             LDR      R1,[R4, #+4]
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xDB02             BLT.N    ??pit_isr0_0
     80            {
     81              QD_Interval = Last_QD_Result - QD_Result;
   \   00000014   0x1A40             SUBS     R0,R0,R1
   \   00000016   0x6020             STR      R0,[R4, #+0]
   \   00000018   0xE004             B.N      ??pit_isr0_1
     82            }
     83            else
     84            {
     85              QD_Interval = 65535 + Last_QD_Result-QD_Result;
   \                     ??pit_isr0_0: (+1)
   \   0000001A   0xF500 0x407F      ADD      R0,R0,#+65280
   \   0000001E   0x30FF             ADDS     R0,R0,#+255
   \   00000020   0x1A40             SUBS     R0,R0,R1
   \   00000022   0x6020             STR      R0,[R4, #+0]
     86            }
     87            Last_QD_Result = QD_Result;
   \                     ??pit_isr0_1: (+1)
   \   00000024   0x60A1             STR      R1,[R4, #+8]
     88            Speed_Control();
   \   00000026   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002A   0x.... 0x....      B.W      Speed_Control
     89          }
     90          
     91          
     92          // PIT@@@

   \                                 In section .bss, align 4
     93          PIT_InitTypeDef encoder_pit_init_struct;
   \                     encoder_pit_init_struct:
   \   00000000                      DS8 20

   \                                 In section .text, align 2, keep-with-next
     94          void Encoder_PIT_Init(void)
     95          {
   \                     Encoder_PIT_Init: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
     96            encoder_pit_init_struct.PIT_Pitx = PIT0;
   \   00000002   0x....             LDR.N    R4,??DataTable4_7
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x7020             STRB     R0,[R4, #+0]
     97            encoder_pit_init_struct.PIT_PeriodMs = 10;
   \   00000008   0x200A             MOVS     R0,#+10
   \   0000000A   0x60A0             STR      R0,[R4, #+8]
     98            encoder_pit_init_struct.PIT_Isr = pit_isr0;
   \   0000000C   0x....             LDR.N    R0,??DataTable4_8
   \   0000000E   0x6120             STR      R0,[R4, #+16]
     99            LPLD_PIT_Init(encoder_pit_init_struct);
   \   00000010   0x4621             MOV      R1,R4
   \   00000012   0xB084             SUB      SP,SP,#+16
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x2214             MOVS     R2,#+20
   \   00000018   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001C   0xBC0F             POP      {R0-R3}
   \   0000001E   0x.... 0x....      BL       LPLD_PIT_Init
    100            LPLD_PIT_EnableIrq(encoder_pit_init_struct);
   \   00000022   0x4621             MOV      R1,R4
   \   00000024   0xB084             SUB      SP,SP,#+16
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x2214             MOVS     R2,#+20
   \   0000002A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002E   0xBC0F             POP      {R0-R3}
   \   00000030   0x.... 0x....      BL       LPLD_PIT_EnableIrq
    101          }
   \   00000034   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    102          

   \                                 In section .text, align 2, keep-with-next
    103          void Encoder_Init(void)
    104          {
   \                     Encoder_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    105            Encoder_PWM_Init();
   \   00000002   0x.... 0x....      BL       Encoder_PWM_Init
    106            Encoder_PIT_Init();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x....             B.N      Encoder_PIT_Init
    107            
    108          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     motor_PWM_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     server_PWM_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     encoder_pwm_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     QD_Interval

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     encoder_pit_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     pit_isr0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Encoder_Init
         0   -> Encoder_PIT_Init
         8   -> Encoder_PWM_Init
      32   Encoder_PIT_Init
        16   -> LPLD_PIT_EnableIrq
        16   -> LPLD_PIT_Init
        32   -> __aeabi_memcpy4
      40   Encoder_PWM_Init
        24   -> LPLD_FTM_Init
         0   -> LPLD_FTM_QD_Enable
        40   -> __aeabi_memcpy4
      16   Motor_Drive
         0   -> LPLD_FTM_PWM_ChangeDuty
        16   -> LPLD_FTM_PWM_ChangeDuty
        16   -> abs
      40   Motor_Init
        24   -> LPLD_FTM_Init
        24   -> LPLD_FTM_PWM_Enable
         0   -> Motor_Drive
        40   -> __aeabi_memcpy4
       0   Server_Drive
         0   -> LPLD_FTM_PWM_ChangeDuty
      40   Server_Init
        24   -> LPLD_FTM_Init
        24   -> LPLD_FTM_PWM_Enable
         0   -> Server_Drive
        40   -> __aeabi_memcpy4
       8   pit_isr0
         8   -> LPLD_FTM_GetCounter
         0   -> Speed_Control


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
      12  Encoder_Init
      54  Encoder_PIT_Init
      48  Encoder_PWM_Init
      90  Motor_Drive
      78  Motor_Init
      12  QD_Interval
          QD_Result
          Last_QD_Result
      30  Server_Drive
      58  Server_Init
      20  encoder_pit_init_struct
      28  encoder_pwm_init_struct
      28  motor_PWM_init_struct
      46  pit_isr0
      28  server_PWM_init_struct

 
 116 bytes in section .bss
 452 bytes in section .text
 
 452 bytes of CODE memory
 116 bytes of DATA memory

Errors: none
Warnings: 2
