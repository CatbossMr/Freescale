###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.2.14835/W32 for ARM       08/Mar/2018  21:10:47
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\workspace\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_DMA.c
#    Command line =  
#        -f C:\Users\JoyC\AppData\Local\Temp\EW2BB4.tmp
#        (D:\workspace\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_DMA.c -D LPLD_K60 -D
#        USE_K60DZ10 -lCN
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\RAM\List -lB
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\RAM\List -o
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\RAM\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "D:\Program Files\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\app\ -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\CPU\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\common\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\LPLD\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\LPLD\HW\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\FatFs\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\FatFs\option\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\USB\common\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\USB\driver\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\USB\descriptor\
#        -I
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\Program Files\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\RAM\List\HW_DMA.lst
#    Object file  =  
#        D:\workspace\LPLD_OSKinetis_V3\project\Overload\iar\RAM\Obj\HW_DMA.o
#
###############################################################################

D:\workspace\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_DMA.c
      1          /**
      2           * @file HW_DMA.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief DMA底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD409             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable19  ;; 0xe000e100
   \   00000014   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000016   0x0940             LSRS     R0,R0,#+5
   \   00000018   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_DisableIRQ(IRQn_Type)
   \                     __NVIC_DisableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD409             BMI.N    ??__NVIC_DisableIRQ_0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable19_1  ;; 0xe000e180
   \   00000014   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000016   0x0940             LSRS     R0,R0,#+5
   \   00000018   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
     23          #include "HW_DMA.h"
     24          
     25          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
     26          //@@@@@@@@@@@@@

   \                                 In section .bss, align 4
     27          DMA_ISR_CALLBACK DMA_ISR[16];
   \                     DMA_ISR:
   \   00000000                      DS8 64
     28          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
     29          DMA_ISR_CALLBACK DMA_ISR[32];
     30          #endif
     31          /*
     32           * LPLD_DMA_Init
     33           * @@@eDMA@@
     34           * 
     35           * @@:
     36           *    dma_init_struct--eDMA@@@@@@@
     37           *                        @@@@@DMA_InitTypeDef
     38           *
     39           * @@:
     40           *    0--@@@@
     41           *    1--@@@@
     42           */

   \                                 In section .text, align 2, keep-with-next
     43          uint8 LPLD_DMA_Init(DMA_InitTypeDef dma_init_struct)
     44          {
   \                     LPLD_DMA_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000006   0xB085             SUB      SP,SP,#+20
     45            uint8 chx = dma_init_struct.DMA_CHx;
   \   00000008   0xF89D 0x5038      LDRB     R5,[SP, #+56]
     46            uint8 req = dma_init_struct.DMA_Req;
   \   0000000C   0xF89D 0x6039      LDRB     R6,[SP, #+57]
     47            boolean periodic_trigg = dma_init_struct.DMA_PeriodicTriggerEnable;
   \   00000010   0xF89D 0x003A      LDRB     R0,[SP, #+58]
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
     48            uint16 major_cnt = dma_init_struct.DMA_MajorLoopCnt;
   \   00000018   0xF8BD 0x703C      LDRH     R7,[SP, #+60]
     49            uint32 minor_cnt = dma_init_struct.DMA_MinorByteCnt;
   \   0000001C   0x9810             LDR      R0,[SP, #+64]
   \   0000001E   0x9004             STR      R0,[SP, #+16]
     50            uint32 src_addr = dma_init_struct.DMA_SourceAddr;
   \   00000020   0x9811             LDR      R0,[SP, #+68]
   \   00000022   0x9002             STR      R0,[SP, #+8]
     51            uint8 src_dsize = dma_init_struct.DMA_SourceDataSize;
   \   00000024   0xF89D 0x8048      LDRB     R8,[SP, #+72]
     52            int16 src_addroffset = dma_init_struct.DMA_SourceAddrOffset;
   \   00000028   0xF9BD 0x004A      LDRSH    R0,[SP, #+74]
   \   0000002C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     53            int32 src_lastadj = dma_init_struct.DMA_LastSourceAddrAdj;
   \   00000030   0x9813             LDR      R0,[SP, #+76]
   \   00000032   0x9003             STR      R0,[SP, #+12]
     54            uint32 dst_addr = dma_init_struct.DMA_DestAddr;
   \   00000034   0x9C14             LDR      R4,[SP, #+80]
     55            uint8 dst_dsize = dma_init_struct.DMA_DestDataSize;
   \   00000036   0xF89D 0x9054      LDRB     R9,[SP, #+84]
     56            int16 dst_addroffset = dma_init_struct.DMA_DestAddrOffset;
   \   0000003A   0xF9BD 0x0056      LDRSH    R0,[SP, #+86]
   \   0000003E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     57            int32 dst_lastadj = dma_init_struct.DMA_LastDestAddrAdj;
   \   00000042   0xF8DD 0xA058      LDR      R10,[SP, #+88]
     58            boolean auto_disable = dma_init_struct.DMA_AutoDisableReq;
   \   00000046   0xF89D 0xB05C      LDRB     R11,[SP, #+92]
     59            
     60            //@@@@
     61          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
     62            ASSERT( chx <= DMA_CH15 );       //eDMA@@@@
   \   0000004A   0x0028             MOVS     R0,R5
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x2810             CMP      R0,#+16
   \   00000050   0xDB04             BLT.N    ??LPLD_DMA_Init_0
   \   00000052   0x213E             MOVS     R1,#+62
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000058   0x.... 0x....      BL       assert_failed
     63          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
     64            ASSERT( chx <= DMA_CH31 );       //eDMA@@@@
     65          #endif
     66            ASSERT( req <= DMA_MUX_63 );     //@@@@@
   \                     ??LPLD_DMA_Init_0: (+1)
   \   0000005C   0x0030             MOVS     R0,R6
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x2840             CMP      R0,#+64
   \   00000062   0xDB04             BLT.N    ??LPLD_DMA_Init_1
   \   00000064   0x2142             MOVS     R1,#+66
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   0000006A   0x.... 0x....      BL       assert_failed
     67            ASSERT( major_cnt <= 0x7FFF );   //@@@@@
   \                     ??LPLD_DMA_Init_1: (+1)
   \   0000006E   0x0038             MOVS     R0,R7
   \   00000070   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   0xF5B0 0x4F00      CMP      R0,#+32768
   \   00000076   0xDB04             BLT.N    ??LPLD_DMA_Init_2
   \   00000078   0x2143             MOVS     R1,#+67
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   0000007E   0x.... 0x....      BL       assert_failed
     68            ASSERT( src_addr != NULL );      //@@@@@
   \                     ??LPLD_DMA_Init_2: (+1)
   \   00000082   0x9802             LDR      R0,[SP, #+8]
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD104             BNE.N    ??LPLD_DMA_Init_3
   \   00000088   0x2144             MOVS     R1,#+68
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   0000008E   0x.... 0x....      BL       assert_failed
     69            ASSERT( (src_dsize <= DMA_SRC_32BIT)||(src_dsize == DMA_SRC_16BYTE) );     //@@@@@@@@@
   \                     ??LPLD_DMA_Init_3: (+1)
   \   00000092   0x4640             MOV      R0,R8
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x2803             CMP      R0,#+3
   \   00000098   0xDB08             BLT.N    ??LPLD_DMA_Init_4
   \   0000009A   0x4640             MOV      R0,R8
   \   0000009C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009E   0x2804             CMP      R0,#+4
   \   000000A0   0xD004             BEQ.N    ??LPLD_DMA_Init_4
   \   000000A2   0x2145             MOVS     R1,#+69
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   000000A8   0x.... 0x....      BL       assert_failed
     70            ASSERT( dst_addr != NULL );      //@@@@@@
   \                     ??LPLD_DMA_Init_4: (+1)
   \   000000AC   0x2C00             CMP      R4,#+0
   \   000000AE   0xD104             BNE.N    ??LPLD_DMA_Init_5
   \   000000B0   0x2146             MOVS     R1,#+70
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   000000B6   0x.... 0x....      BL       assert_failed
     71            ASSERT( (dst_dsize <= DMA_DST_32BIT)||(dst_dsize == DMA_DST_16BYTE) );     //@@@@@@@@@@
   \                     ??LPLD_DMA_Init_5: (+1)
   \   000000BA   0x4648             MOV      R0,R9
   \   000000BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BE   0x2803             CMP      R0,#+3
   \   000000C0   0xDB08             BLT.N    ??LPLD_DMA_Init_6
   \   000000C2   0x4648             MOV      R0,R9
   \   000000C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C6   0x2804             CMP      R0,#+4
   \   000000C8   0xD004             BEQ.N    ??LPLD_DMA_Init_6
   \   000000CA   0x2147             MOVS     R1,#+71
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   000000D0   0x.... 0x....      BL       assert_failed
     72           
     73          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10)   
     74            SIM->SCGC6 |= SIM_SCGC6_DMAMUX_MASK;  //@@DMA@@@@@@@@@ 
   \                     ??LPLD_DMA_Init_6: (+1)
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x4004803c
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x4004803c
   \   000000E2   0x6008             STR      R0,[R1, #+0]
     75          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
     76            SIM->SCGC6 |= SIM_SCGC6_DMAMUX0_MASK;  //@@DMA@@@@@@@@@ 
     77            SIM->SCGC6 |= SIM_SCGC6_DMAMUX1_MASK;  //@@DMA@@@@@@@@@ 
     78          #endif  
     79            SIM->SCGC7 |= SIM_SCGC7_DMA_MASK;     //@@DMA@@@@
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable19_4  ;; 0x40048040
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable19_4  ;; 0x40048040
   \   000000F2   0x6008             STR      R0,[R1, #+0]
     80            
     81            //@@@@x@@DMA@@ 
     82            DMA0->ERQ &= ~(1<<chx);
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable19_5  ;; 0x4000800c
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0x2101             MOVS     R1,#+1
   \   000000FC   0x40A9             LSLS     R1,R1,R5
   \   000000FE   0x4388             BICS     R0,R0,R1
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable19_5  ;; 0x4000800c
   \   00000104   0x6008             STR      R0,[R1, #+0]
     83            
     84            //@@ @@x @@@@@DMA@@@@@
     85          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
     86            DMAMUX->CHCFG[chx] = DMAMUX_CHCFG_SOURCE(req);
   \   00000106   0xF016 0x063F      ANDS     R6,R6,#0x3F
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x40021000
   \   0000010E   0x0029             MOVS     R1,R5
   \   00000110   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000112   0x5446             STRB     R6,[R0, R1]
     87            //@@@@@@@@@@
     88            if(periodic_trigg == TRUE)
   \   00000114   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000118   0x2801             CMP      R0,#+1
   \   0000011A   0xD10C             BNE.N    ??LPLD_DMA_Init_7
     89            {
     90              DMAMUX->CHCFG[chx] |= DMAMUX_CHCFG_TRIG_MASK;
   \   0000011C   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x40021000
   \   00000120   0x0029             MOVS     R1,R5
   \   00000122   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000124   0x5C40             LDRB     R0,[R0, R1]
   \   00000126   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000012A   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x40021000
   \   0000012E   0x002A             MOVS     R2,R5
   \   00000130   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000132   0x5488             STRB     R0,[R1, R2]
   \   00000134   0xE00B             B.N      ??LPLD_DMA_Init_8
     91            }
     92            else
     93            {
     94              DMAMUX->CHCFG[chx] &= ~(DMAMUX_CHCFG_TRIG_MASK);
   \                     ??LPLD_DMA_Init_7: (+1)
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x40021000
   \   0000013A   0x0029             MOVS     R1,R5
   \   0000013C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000013E   0x5C40             LDRB     R0,[R0, R1]
   \   00000140   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x40021000
   \   00000148   0x002A             MOVS     R2,R5
   \   0000014A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000014C   0x5488             STRB     R0,[R1, R2]
     95            }
     96          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
     97            if(chx < 16)
     98            {
     99              DMAMUX0->CHCFG[chx] = DMAMUX_CHCFG_SOURCE(req);
    100              //@@@@@@@@@@
    101              if(periodic_trigg == TRUE)
    102              {
    103                DMAMUX0->CHCFG[chx] |= DMAMUX_CHCFG_TRIG_MASK;
    104              }
    105              else
    106              {
    107                DMAMUX0->CHCFG[chx] &= ~(DMAMUX_CHCFG_TRIG_MASK);
    108              }
    109            }
    110            else // ch > 16
    111            {
    112              DMAMUX1->CHCFG[chx - 16] = DMAMUX_CHCFG_SOURCE(req);
    113              //@@@@@@@@@@
    114              if(periodic_trigg == TRUE)
    115              {
    116                DMAMUX1->CHCFG[chx - 16] |= DMAMUX_CHCFG_TRIG_MASK;
    117              }
    118              else
    119              {
    120                DMAMUX1->CHCFG[chx - 16] &= ~(DMAMUX_CHCFG_TRIG_MASK);
    121              }
    122            }
    123          #endif   
    124          
    125            
    126            
    127            //@@@@@   
    128            DMA0->TCD[chx].SADDR = DMA_SADDR_SADDR(src_addr);
   \                     ??LPLD_DMA_Init_8: (+1)
   \   0000014E   0x9802             LDR      R0,[SP, #+8]
   \   00000150   0x.... 0x....      LDR.W    R1,??DataTable19_7  ;; 0x40009000
   \   00000154   0x002A             MOVS     R2,R5
   \   00000156   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000158   0x0152             LSLS     R2,R2,#+5
   \   0000015A   0x5088             STR      R0,[R1, R2]
    129            //@@@@@@@@@@@@@@@@@@@@@@@@@/@@@@@@
    130            DMA0->TCD[chx].SOFF = DMA_SOFF_SOFF(src_addroffset);
   \   0000015C   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000160   0x.... 0x....      LDR.W    R1,??DataTable19_7  ;; 0x40009000
   \   00000164   0x002A             MOVS     R2,R5
   \   00000166   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000168   0x0152             LSLS     R2,R2,#+5
   \   0000016A   0x4411             ADD      R1,R1,R2
   \   0000016C   0x8088             STRH     R0,[R1, #+4]
    131            //@@@@@@@@@@
    132            DMA0->TCD[chx].ATTR = 0 | DMA_ATTR_SSIZE(src_dsize);
   \   0000016E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000172   0xEA5F 0x2808      LSLS     R8,R8,#+8
   \   00000176   0xF418 0x68E0      ANDS     R8,R8,#0x700
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable19_7  ;; 0x40009000
   \   0000017E   0x0029             MOVS     R1,R5
   \   00000180   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000182   0x0149             LSLS     R1,R1,#+5
   \   00000184   0x4408             ADD      R0,R0,R1
   \   00000186   0xF8A0 0x8006      STRH     R8,[R0, #+6]
    133            //@@@@@@@major iteration count@@@@@@@@@@@@
    134            DMA0->TCD[chx].SLAST = DMA_SLAST_SLAST(src_lastadj);
   \   0000018A   0x9803             LDR      R0,[SP, #+12]
   \   0000018C   0x....             LDR.N    R1,??DataTable19_7  ;; 0x40009000
   \   0000018E   0x002A             MOVS     R2,R5
   \   00000190   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000192   0x0152             LSLS     R2,R2,#+5
   \   00000194   0x4411             ADD      R1,R1,R2
   \   00000196   0x60C8             STR      R0,[R1, #+12]
    135            
    136            //@@@@@@ 
    137            DMA0->TCD[chx].DADDR = DMA_DADDR_DADDR(dst_addr);
   \   00000198   0x....             LDR.N    R0,??DataTable19_7  ;; 0x40009000
   \   0000019A   0x0029             MOVS     R1,R5
   \   0000019C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000019E   0x0149             LSLS     R1,R1,#+5
   \   000001A0   0x4408             ADD      R0,R0,R1
   \   000001A2   0x6104             STR      R4,[R0, #+16]
    138            //@@@@@@@@@@@@@@@@@@@@@@@@@@@/@@@@@@
    139            DMA0->TCD[chx].DOFF = DMA_DOFF_DOFF(dst_addroffset);
   \   000001A4   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   000001A8   0x....             LDR.N    R1,??DataTable19_7  ;; 0x40009000
   \   000001AA   0x002A             MOVS     R2,R5
   \   000001AC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001AE   0x0152             LSLS     R2,R2,#+5
   \   000001B0   0x4411             ADD      R1,R1,R2
   \   000001B2   0x8288             STRH     R0,[R1, #+20]
    140            //@@@@@@@@@@@
    141            DMA0->TCD[chx].ATTR |= DMA_ATTR_DSIZE(dst_dsize);
   \   000001B4   0x....             LDR.N    R0,??DataTable19_7  ;; 0x40009000
   \   000001B6   0x0029             MOVS     R1,R5
   \   000001B8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001BA   0x0149             LSLS     R1,R1,#+5
   \   000001BC   0x4408             ADD      R0,R0,R1
   \   000001BE   0x88C0             LDRH     R0,[R0, #+6]
   \   000001C0   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000001C4   0xF019 0x0907      ANDS     R9,R9,#0x7
   \   000001C8   0xEA59 0x0900      ORRS     R9,R9,R0
   \   000001CC   0x....             LDR.N    R0,??DataTable19_7  ;; 0x40009000
   \   000001CE   0x0029             MOVS     R1,R5
   \   000001D0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001D2   0x0149             LSLS     R1,R1,#+5
   \   000001D4   0x4408             ADD      R0,R0,R1
   \   000001D6   0xF8A0 0x9006      STRH     R9,[R0, #+6]
    142            //@@@@@@@major iteration count@@@@@@@@@@@@@
    143            DMA0->TCD[chx].DLAST_SGA = DMA_DLAST_SGA_DLASTSGA(dst_lastadj);
   \   000001DA   0x....             LDR.N    R0,??DataTable19_7  ;; 0x40009000
   \   000001DC   0x0029             MOVS     R1,R5
   \   000001DE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001E0   0x0149             LSLS     R1,R1,#+5
   \   000001E2   0x4408             ADD      R0,R0,R1
   \   000001E4   0xF8C0 0xA018      STR      R10,[R0, #+24]
    144            
    145            //@@@@@@@@@@@@@@@@@@@@@
    146            if( 1 == 1)
    147            {
    148              //===============@@@@@@@@@@@@@====================================
    149              //@@@@@@@@ current major loop count
    150              DMA0->TCD[chx].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(major_cnt);
   \   000001E8   0x0478             LSLS     R0,R7,#+17       ;; ZeroExtS R0,R7,#+17,#+17
   \   000001EA   0x0C40             LSRS     R0,R0,#+17
   \   000001EC   0x....             LDR.N    R1,??DataTable19_7  ;; 0x40009000
   \   000001EE   0x002A             MOVS     R2,R5
   \   000001F0   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001F2   0x0152             LSLS     R2,R2,#+5
   \   000001F4   0x4411             ADD      R1,R1,R2
   \   000001F6   0x82C8             STRH     R0,[R1, #+22]
    151              //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    152              DMA0->TCD[chx].BITER_ELINKNO = DMA_CITER_ELINKNO_CITER(major_cnt);
   \   000001F8   0x047F             LSLS     R7,R7,#+17       ;; ZeroExtS R7,R7,#+17,#+17
   \   000001FA   0x0C7F             LSRS     R7,R7,#+17
   \   000001FC   0x....             LDR.N    R0,??DataTable19_7  ;; 0x40009000
   \   000001FE   0x0029             MOVS     R1,R5
   \   00000200   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000202   0x0149             LSLS     R1,R1,#+5
   \   00000204   0x4408             ADD      R0,R0,R1
   \   00000206   0x83C7             STRH     R7,[R0, #+30]
    153            }
    154            
    155            //@@@@@@@@@@@@@@@@@@@@@@@@
    156            if( 1 == 1)
    157            {
    158              //@@@@@@@@@@@@
    159              DMA0->TCD[chx].NBYTES_MLNO = DMA_NBYTES_MLNO_NBYTES(minor_cnt);
   \   00000208   0x9804             LDR      R0,[SP, #+16]
   \   0000020A   0x....             LDR.N    R1,??DataTable19_7  ;; 0x40009000
   \   0000020C   0x002A             MOVS     R2,R5
   \   0000020E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000210   0x0152             LSLS     R2,R2,#+5
   \   00000212   0x4411             ADD      R1,R1,R2
   \   00000214   0x6088             STR      R0,[R1, #+8]
    160            }
    161            
    162            //@@TCD@@@@@     
    163            DMA0->TCD[chx].CSR = 0;
   \   00000216   0x2000             MOVS     R0,#+0
   \   00000218   0x....             LDR.N    R1,??DataTable19_7  ;; 0x40009000
   \   0000021A   0x002A             MOVS     R2,R5
   \   0000021C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000021E   0x0152             LSLS     R2,R2,#+5
   \   00000220   0x4411             ADD      R1,R1,R2
   \   00000222   0x8388             STRH     R0,[R1, #+28]
    164            
    165            //@@eDMA@@
    166            if((dma_init_struct.DMA_Isr != NULL) && 
    167               (dma_init_struct.DMA_MajorCompleteIntEnable == TRUE))
   \   00000224   0x9818             LDR      R0,[SP, #+96]
   \   00000226   0x2800             CMP      R0,#+0
   \   00000228   0xD017             BEQ.N    ??LPLD_DMA_Init_9
   \   0000022A   0xF89D 0x005D      LDRB     R0,[SP, #+93]
   \   0000022E   0x2801             CMP      R0,#+1
   \   00000230   0xD113             BNE.N    ??LPLD_DMA_Init_9
    168            {
    169          
    170                 DMA0->TCD[chx].CSR |= DMA_CSR_INTMAJOR_MASK; //@@DMA @@@@@@@@@ @@
   \   00000232   0x....             LDR.N    R0,??DataTable19_7  ;; 0x40009000
   \   00000234   0x0029             MOVS     R1,R5
   \   00000236   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000238   0x0149             LSLS     R1,R1,#+5
   \   0000023A   0x4408             ADD      R0,R0,R1
   \   0000023C   0x8B80             LDRH     R0,[R0, #+28]
   \   0000023E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000242   0x....             LDR.N    R1,??DataTable19_7  ;; 0x40009000
   \   00000244   0x002A             MOVS     R2,R5
   \   00000246   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000248   0x0152             LSLS     R2,R2,#+5
   \   0000024A   0x4411             ADD      R1,R1,R2
   \   0000024C   0x8388             STRH     R0,[R1, #+28]
    171                 DMA_ISR[chx] = dma_init_struct.DMA_Isr;
   \   0000024E   0x9818             LDR      R0,[SP, #+96]
   \   00000250   0x....             LDR.N    R1,??DataTable19_8
   \   00000252   0x002A             MOVS     R2,R5
   \   00000254   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000256   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    172            }
    173            if((dma_init_struct.DMA_Isr != NULL) && 
    174               (dma_init_struct.DMA_MajorHalfCompleteIntEnable == TRUE))
   \                     ??LPLD_DMA_Init_9: (+1)
   \   0000025A   0x9818             LDR      R0,[SP, #+96]
   \   0000025C   0x2800             CMP      R0,#+0
   \   0000025E   0xD017             BEQ.N    ??LPLD_DMA_Init_10
   \   00000260   0xF89D 0x005E      LDRB     R0,[SP, #+94]
   \   00000264   0x2801             CMP      R0,#+1
   \   00000266   0xD113             BNE.N    ??LPLD_DMA_Init_10
    175            {
    176          
    177                 DMA0->TCD[chx].CSR |= DMA_CSR_INTHALF_MASK; //@@DMA @@@@@@@@@@ @@
   \   00000268   0x....             LDR.N    R0,??DataTable19_7  ;; 0x40009000
   \   0000026A   0x0029             MOVS     R1,R5
   \   0000026C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000026E   0x0149             LSLS     R1,R1,#+5
   \   00000270   0x4408             ADD      R0,R0,R1
   \   00000272   0x8B80             LDRH     R0,[R0, #+28]
   \   00000274   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000278   0x....             LDR.N    R1,??DataTable19_7  ;; 0x40009000
   \   0000027A   0x002A             MOVS     R2,R5
   \   0000027C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000027E   0x0152             LSLS     R2,R2,#+5
   \   00000280   0x4411             ADD      R1,R1,R2
   \   00000282   0x8388             STRH     R0,[R1, #+28]
    178                 DMA_ISR[chx] = dma_init_struct.DMA_Isr;
   \   00000284   0x9818             LDR      R0,[SP, #+96]
   \   00000286   0x....             LDR.N    R1,??DataTable19_8
   \   00000288   0x002A             MOVS     R2,R5
   \   0000028A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000028C   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    179            }
    180              
    181            if(auto_disable == TRUE)
   \                     ??LPLD_DMA_Init_10: (+1)
   \   00000290   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000294   0xF1BB 0x0F01      CMP      R11,#+1
   \   00000298   0xD10E             BNE.N    ??LPLD_DMA_Init_11
    182            {
    183               DMA0->TCD[chx].CSR |= DMA_CSR_DREQ_MASK; //@@@@@@@@@@@@@@@DMA 
   \   0000029A   0x....             LDR.N    R0,??DataTable19_7  ;; 0x40009000
   \   0000029C   0x0029             MOVS     R1,R5
   \   0000029E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002A0   0x0149             LSLS     R1,R1,#+5
   \   000002A2   0x4408             ADD      R0,R0,R1
   \   000002A4   0x8B80             LDRH     R0,[R0, #+28]
   \   000002A6   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000002AA   0x....             LDR.N    R1,??DataTable19_7  ;; 0x40009000
   \   000002AC   0x002A             MOVS     R2,R5
   \   000002AE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002B0   0x0152             LSLS     R2,R2,#+5
   \   000002B2   0x4411             ADD      R1,R1,R2
   \   000002B4   0x8388             STRH     R0,[R1, #+28]
   \   000002B6   0xE00E             B.N      ??LPLD_DMA_Init_12
    184            }
    185            else
    186            {
    187               DMA0->TCD[chx].CSR &= ~(DMA_CSR_DREQ_MASK); //@@@@@@@@@@@@@@DMA
   \                     ??LPLD_DMA_Init_11: (+1)
   \   000002B8   0x....             LDR.N    R0,??DataTable19_7  ;; 0x40009000
   \   000002BA   0x0029             MOVS     R1,R5
   \   000002BC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002BE   0x0149             LSLS     R1,R1,#+5
   \   000002C0   0x4408             ADD      R0,R0,R1
   \   000002C2   0x8B81             LDRH     R1,[R0, #+28]
   \   000002C4   0xF64F 0x70F7      MOVW     R0,#+65527
   \   000002C8   0x4001             ANDS     R1,R0,R1
   \   000002CA   0x....             LDR.N    R0,??DataTable19_7  ;; 0x40009000
   \   000002CC   0x002A             MOVS     R2,R5
   \   000002CE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002D0   0x0152             LSLS     R2,R2,#+5
   \   000002D2   0x4410             ADD      R0,R0,R2
   \   000002D4   0x8381             STRH     R1,[R0, #+28]
    188            } 
    189           
    190            //DMA@@@@
    191          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10)   
    192            DMAMUX->CHCFG[chx] |= DMAMUX_CHCFG_ENBL_MASK;
   \                     ??LPLD_DMA_Init_12: (+1)
   \   000002D6   0x....             LDR.N    R0,??DataTable19_6  ;; 0x40021000
   \   000002D8   0x0029             MOVS     R1,R5
   \   000002DA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002DC   0x5C40             LDRB     R0,[R0, R1]
   \   000002DE   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000002E2   0x....             LDR.N    R1,??DataTable19_6  ;; 0x40021000
   \   000002E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002E6   0x5548             STRB     R0,[R1, R5]
    193          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    194            if(chx < 16)
    195            {
    196              DMAMUX0->CHCFG[chx] |= DMAMUX_CHCFG_ENBL_MASK;
    197            }
    198            else
    199            {
    200              DMAMUX1->CHCFG[chx - 16] |= DMAMUX_CHCFG_ENBL_MASK;
    201            }
    202          #endif
    203            return 1;
   \   000002E8   0x2001             MOVS     R0,#+1
   \   000002EA   0xB005             ADD      SP,SP,#+20
   \   000002EC   0xE8BD 0x0FF0      POP      {R4-R11}
   \   000002F0   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    204          }
    205          
    206          /*
    207           * LPLD_DMA_EnableIrq
    208           * @@eDMA@@
    209           * 
    210           * @@:
    211           *    dma_init_struct--eDMA@@@@@@@
    212           *                        @@@@@DMA_InitTypeDef
    213           *
    214           * @@:
    215           *    0--@@
    216           *    1--@@
    217           */

   \                                 In section .text, align 2, keep-with-next
    218          uint8 LPLD_DMA_EnableIrq(DMA_InitTypeDef dma_init_struct)
    219          {
   \                     LPLD_DMA_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    220          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
    221            enable_irq((IRQn_Type)(dma_init_struct.DMA_CHx + DMA0_IRQn)); 
   \   00000004   0xF99D 0x0008      LDRSB    R0,[SP, #+8]
   \   00000008   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       __NVIC_EnableIRQ
    222          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    223            if(dma_init_struct.DMA_CHx < 16)
    224            {
    225              enable_irq((IRQn_Type)(dma_init_struct.DMA_CHx + DMA0_DMA16_IRQn));
    226            }
    227            else // ch > 16
    228            {
    229              enable_irq((IRQn_Type)(dma_init_struct.DMA_CHx - 16 + DMA0_DMA16_IRQn));
    230            }
    231          #endif 
    232            return 1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xBC02             POP      {R1}
   \   00000012   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    233          }
    234          
    235          /*
    236           * LPLD_DMA_DisableIrq
    237           * @@eDMA@@
    238           * 
    239           * @@:
    240           *    dma_init_struct--eDMA@@@@@@@
    241           *                        @@@@@DMA_InitTypeDef
    242           *
    243           * @@:
    244           *    0--@@
    245           *    1--@@
    246           */

   \                                 In section .text, align 2, keep-with-next
    247          uint8 LPLD_DMA_DisableIrq(DMA_InitTypeDef dma_init_struct)
    248          {
   \                     LPLD_DMA_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    249          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
    250            disable_irq((IRQn_Type)(dma_init_struct.DMA_CHx + DMA0_IRQn)); 
   \   00000004   0xF99D 0x0008      LDRSB    R0,[SP, #+8]
   \   00000008   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       __NVIC_DisableIRQ
    251          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    252            if(dma_init_struct.DMA_CHx < 16)
    253            {
    254              disable_irq((IRQn_Type)(dma_init_struct.DMA_CHx + DMA0_DMA16_IRQn));
    255            }
    256            else // ch > 16
    257            {
    258              disable_irq((IRQn_Type)(dma_init_struct.DMA_CHx - 16 + DMA0_DMA16_IRQn));
    259            }
    260          #endif 
    261            return 1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xBC02             POP      {R1}
   \   00000012   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    262          }
    263          
    264          /*
    265           * LPLD_DMA_SoftwareStartService
    266           * DMA@@@@@@@@
    267           * 
    268           * @@:
    269           *    dma_init_struct--eDMA@@@@@@@
    270           *                        @@@@@DMA_InitTypeDef
    271           *
    272           * @@:
    273           *    @
    274           */

   \                                 In section .text, align 2, keep-with-next
    275          __INLINE void LPLD_DMA_SoftwareStartService(DMA_InitTypeDef dma_init_struct)
    276          {
   \                     LPLD_DMA_SoftwareStartService: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
    277            DMA0->TCD[dma_init_struct.DMA_CHx].CSR |= DMA_CSR_START_MASK; 
   \   00000002   0x....             LDR.N    R0,??DataTable19_7  ;; 0x40009000
   \   00000004   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000008   0x0149             LSLS     R1,R1,#+5
   \   0000000A   0x4408             ADD      R0,R0,R1
   \   0000000C   0x8B80             LDRH     R0,[R0, #+28]
   \   0000000E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000012   0x....             LDR.N    R1,??DataTable19_7  ;; 0x40009000
   \   00000014   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \   00000018   0x0152             LSLS     R2,R2,#+5
   \   0000001A   0x4411             ADD      R1,R1,R2
   \   0000001C   0x8388             STRH     R0,[R1, #+28]
    278          }
   \   0000001E   0xB004             ADD      SP,SP,#+16
   \   00000020   0x4770             BX       LR               ;; return
    279          
    280          /*
    281           * eDMA@@@@@@
    282           * @@@@@startup_K60.s@@@@@@@@@
    283           * @@@@@@@@@@@@@@@@@@@@@
    284           */
    285          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 

   \                                 In section .text, align 2, keep-with-next
    286          void DMA0_IRQHandler(void)
    287          {
   \                     DMA0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    288          #if (UCOS_II > 0u)
    289            OS_CPU_SR  cpu_sr = 0u;
    290            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    291            OSIntEnter();
    292            OS_EXIT_CRITICAL();
    293          #endif  
    294            
    295            //@@@@@@@@@@@
    296            DMA_ISR[0]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    297            //@@@@@@@
    298            DMA0->INT |= 0x1u<<0;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    299            
    300          #if (UCOS_II > 0u)
    301            OSIntExit();          //@@@@@@@@@@@@@@@@@
    302          #endif
    303          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    304          

   \                                 In section .text, align 2, keep-with-next
    305          void DMA1_IRQHandler(void)
    306          {
   \                     DMA1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    307          #if (UCOS_II > 0u)
    308            OS_CPU_SR  cpu_sr = 0u;
    309            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    310            OSIntEnter();
    311            OS_EXIT_CRITICAL();
    312          #endif  
    313            
    314            //@@@@@@@@@@@
    315            DMA_ISR[1]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x4780             BLX      R0
    316            //@@@@@@@
    317            DMA0->INT |= 0x1u<<1;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    318            
    319          #if (UCOS_II > 0u)
    320            OSIntExit();          //@@@@@@@@@@@@@@@@@
    321          #endif
    322          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    323          

   \                                 In section .text, align 2, keep-with-next
    324          void DMA2_IRQHandler(void)
    325          {
   \                     DMA2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    326          #if (UCOS_II > 0u)
    327            OS_CPU_SR  cpu_sr = 0u;
    328            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    329            OSIntEnter();
    330            OS_EXIT_CRITICAL();
    331          #endif  
    332            
    333            //@@@@@@@@@@@
    334            DMA_ISR[2]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x4780             BLX      R0
    335            //@@@@@@@
    336            DMA0->INT |= 0x1u<<2;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    337            
    338          #if (UCOS_II > 0u)
    339            OSIntExit();          //@@@@@@@@@@@@@@@@@
    340          #endif
    341          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    342          

   \                                 In section .text, align 2, keep-with-next
    343          void DMA3_IRQHandler(void)
    344          {
   \                     DMA3_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    345          #if (UCOS_II > 0u)
    346            OS_CPU_SR  cpu_sr = 0u;
    347            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    348            OSIntEnter();
    349            OS_EXIT_CRITICAL();
    350          #endif  
    351            
    352            //@@@@@@@@@@@
    353            DMA_ISR[3]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x68C0             LDR      R0,[R0, #+12]
   \   00000006   0x4780             BLX      R0
    354            //@@@@@@@
    355            DMA0->INT |= 0x1u<<3;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    356            
    357          #if (UCOS_II > 0u)
    358            OSIntExit();          //@@@@@@@@@@@@@@@@@
    359          #endif
    360          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    361          

   \                                 In section .text, align 2, keep-with-next
    362          void DMA4_IRQHandler(void)
    363          {
   \                     DMA4_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    364          #if (UCOS_II > 0u)
    365            OS_CPU_SR  cpu_sr = 0u;
    366            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    367            OSIntEnter();
    368            OS_EXIT_CRITICAL();
    369          #endif  
    370            
    371            //@@@@@@@@@@@
    372            DMA_ISR[4]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6900             LDR      R0,[R0, #+16]
   \   00000006   0x4780             BLX      R0
    373            //@@@@@@@
    374            DMA0->INT |= 0x1u<<4;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    375            
    376          #if (UCOS_II > 0u)
    377            OSIntExit();          //@@@@@@@@@@@@@@@@@
    378          #endif
    379          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    380          

   \                                 In section .text, align 2, keep-with-next
    381          void DMA5_IRQHandler(void)
    382          {
   \                     DMA5_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    383          #if (UCOS_II > 0u)
    384            OS_CPU_SR  cpu_sr = 0u;
    385            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    386            OSIntEnter();
    387            OS_EXIT_CRITICAL();
    388          #endif  
    389            
    390            //@@@@@@@@@@@
    391            DMA_ISR[5]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6940             LDR      R0,[R0, #+20]
   \   00000006   0x4780             BLX      R0
    392            //@@@@@@@
    393            DMA0->INT |= 0x1u<<5;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    394            
    395          #if (UCOS_II > 0u)
    396            OSIntExit();          //@@@@@@@@@@@@@@@@@
    397          #endif
    398          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    399          

   \                                 In section .text, align 2, keep-with-next
    400          void DMA6_IRQHandler(void)
    401          {
   \                     DMA6_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    402          #if (UCOS_II > 0u)
    403            OS_CPU_SR  cpu_sr = 0u;
    404            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    405            OSIntEnter();
    406            OS_EXIT_CRITICAL();
    407          #endif  
    408            
    409            //@@@@@@@@@@@
    410            DMA_ISR[6]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6980             LDR      R0,[R0, #+24]
   \   00000006   0x4780             BLX      R0
    411            //@@@@@@@
    412            DMA0->INT |= 0x1u<<6;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    413            
    414          #if (UCOS_II > 0u)
    415            OSIntExit();          //@@@@@@@@@@@@@@@@@
    416          #endif
    417          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    418          

   \                                 In section .text, align 2, keep-with-next
    419          void DMA7_IRQHandler(void)
    420          {
   \                     DMA7_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    421          #if (UCOS_II > 0u)
    422            OS_CPU_SR  cpu_sr = 0u;
    423            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    424            OSIntEnter();
    425            OS_EXIT_CRITICAL();
    426          #endif  
    427            
    428            //@@@@@@@@@@@
    429            DMA_ISR[7]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x69C0             LDR      R0,[R0, #+28]
   \   00000006   0x4780             BLX      R0
    430            //@@@@@@@
    431            DMA0->INT |= 0x1u<<7;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    432            
    433          #if (UCOS_II > 0u)
    434            OSIntExit();          //@@@@@@@@@@@@@@@@@
    435          #endif
    436          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    437          

   \                                 In section .text, align 2, keep-with-next
    438          void DMA8_IRQHandler(void)
    439          {
   \                     DMA8_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    440          #if (UCOS_II > 0u)
    441            OS_CPU_SR  cpu_sr = 0u;
    442            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    443            OSIntEnter();
    444            OS_EXIT_CRITICAL();
    445          #endif  
    446            
    447            //@@@@@@@@@@@
    448            DMA_ISR[8]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6A00             LDR      R0,[R0, #+32]
   \   00000006   0x4780             BLX      R0
    449            //@@@@@@@
    450            DMA0->INT |= 0x1u<<8;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    451            
    452          #if (UCOS_II > 0u)
    453            OSIntExit();          //@@@@@@@@@@@@@@@@@
    454          #endif
    455          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    456          

   \                                 In section .text, align 2, keep-with-next
    457          void DMA9_IRQHandler(void)
    458          {
   \                     DMA9_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    459          #if (UCOS_II > 0u)
    460            OS_CPU_SR  cpu_sr = 0u;
    461            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    462            OSIntEnter();
    463            OS_EXIT_CRITICAL();
    464          #endif  
    465            
    466            //@@@@@@@@@@@
    467            DMA_ISR[9]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6A40             LDR      R0,[R0, #+36]
   \   00000006   0x4780             BLX      R0
    468            //@@@@@@@
    469            DMA0->INT |= 0x1u<<9;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    470            
    471          #if (UCOS_II > 0u)
    472            OSIntExit();          //@@@@@@@@@@@@@@@@@
    473          #endif
    474          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    475          

   \                                 In section .text, align 2, keep-with-next
    476          void DMA10_IRQHandler(void)
    477          {
   \                     DMA10_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    478          #if (UCOS_II > 0u)
    479            OS_CPU_SR  cpu_sr = 0u;
    480            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    481            OSIntEnter();
    482            OS_EXIT_CRITICAL();
    483          #endif  
    484            
    485            //@@@@@@@@@@@
    486            DMA_ISR[10]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6A80             LDR      R0,[R0, #+40]
   \   00000006   0x4780             BLX      R0
    487            //@@@@@@@
    488            DMA0->INT |= 0x1u<10;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    489            
    490          #if (UCOS_II > 0u)
    491            OSIntExit();          //@@@@@@@@@@@@@@@@@
    492          #endif
    493          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    494          

   \                                 In section .text, align 2, keep-with-next
    495          void DMA11_IRQHandler(void)
    496          {
   \                     DMA11_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    497          #if (UCOS_II > 0u)
    498            OS_CPU_SR  cpu_sr = 0u;
    499            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    500            OSIntEnter();
    501            OS_EXIT_CRITICAL();
    502          #endif  
    503            
    504            //@@@@@@@@@@@
    505            DMA_ISR[11]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6AC0             LDR      R0,[R0, #+44]
   \   00000006   0x4780             BLX      R0
    506            //@@@@@@@
    507            DMA0->INT |= 0x1u<<11;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    508            
    509          #if (UCOS_II > 0u)
    510            OSIntExit();          //@@@@@@@@@@@@@@@@@
    511          #endif
    512          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    513          

   \                                 In section .text, align 2, keep-with-next
    514          void DMA12_IRQHandler(void)
    515          {
   \                     DMA12_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    516          #if (UCOS_II > 0u)
    517            OS_CPU_SR  cpu_sr = 0u;
    518            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    519            OSIntEnter();
    520            OS_EXIT_CRITICAL();
    521          #endif  
    522            
    523            //@@@@@@@@@@@
    524            DMA_ISR[12]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6B00             LDR      R0,[R0, #+48]
   \   00000006   0x4780             BLX      R0
    525            //@@@@@@@
    526            DMA0->INT |= 0x1u<<12;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    527            
    528          #if (UCOS_II > 0u)
    529            OSIntExit();          //@@@@@@@@@@@@@@@@@
    530          #endif
    531          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    532          

   \                                 In section .text, align 2, keep-with-next
    533          void DMA13_IRQHandler(void)
    534          {
   \                     DMA13_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    535          #if (UCOS_II > 0u)
    536            OS_CPU_SR  cpu_sr = 0u;
    537            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    538            OSIntEnter();
    539            OS_EXIT_CRITICAL();
    540          #endif  
    541            
    542            //@@@@@@@@@@@
    543            DMA_ISR[13]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6B40             LDR      R0,[R0, #+52]
   \   00000006   0x4780             BLX      R0
    544            //@@@@@@@
    545            DMA0->INT |= 0x1u<<13;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    546            
    547          #if (UCOS_II > 0u)
    548            OSIntExit();          //@@@@@@@@@@@@@@@@@
    549          #endif
    550          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    551          

   \                                 In section .text, align 2, keep-with-next
    552          void DMA14_IRQHandler(void)
    553          {
   \                     DMA14_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    554          #if (UCOS_II > 0u)
    555            OS_CPU_SR  cpu_sr = 0u;
    556            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    557            OSIntEnter();
    558            OS_EXIT_CRITICAL();
    559          #endif  
    560            
    561            //@@@@@@@@@@@
    562            DMA_ISR[14]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6B80             LDR      R0,[R0, #+56]
   \   00000006   0x4780             BLX      R0
    563            //@@@@@@@
    564            DMA0->INT |= 0x1u<<14;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    565            
    566          #if (UCOS_II > 0u)
    567            OSIntExit();          //@@@@@@@@@@@@@@@@@
    568          #endif
    569          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    570          

   \                                 In section .text, align 2, keep-with-next
    571          void DMA15_IRQHandler(void)
    572          {
   \                     DMA15_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    573          #if (UCOS_II > 0u)
    574            OS_CPU_SR  cpu_sr = 0u;
    575            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    576            OSIntEnter();
    577            OS_EXIT_CRITICAL();
    578          #endif  
    579            
    580            //@@@@@@@@@@@
    581            DMA_ISR[15]();
   \   00000002   0x....             LDR.N    R0,??DataTable19_8
   \   00000004   0x6BC0             LDR      R0,[R0, #+60]
   \   00000006   0x4780             BLX      R0
    582            //@@@@@@@
    583            DMA0->INT |= 0x1u<<15;
   \   00000008   0x....             LDR.N    R0,??DataTable19_9  ;; 0x40008024
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000010   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40008024
   \   00000012   0x6008             STR      R0,[R1, #+0]
    584            
    585          #if (UCOS_II > 0u)
    586            OSIntExit();          //@@@@@@@@@@@@@@@@@
    587          #endif
    588          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_6:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_7:
   \   00000000   0x40009000         DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_8:
   \   00000000   0x........         DC32     DMA_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_9:
   \   00000000   0x40008024         DC32     0x40008024

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 77H, 6FH, 72H, 6BH, 73H
   \              0x5C 0x77    
   \              0x6F 0x72    
   \              0x6B 0x73    
   \   00000008   0x70 0x61          DC8 70H, 61H, 63H, 65H, 5CH, 4CH, 50H, 4CH
   \              0x63 0x65    
   \              0x5C 0x4C    
   \              0x50 0x4C    
   \   00000010   0x44 0x5F          DC8 44H, 5FH, 4FH, 53H, 4BH, 69H, 6EH, 65H
   \              0x4F 0x53    
   \              0x4B 0x69    
   \              0x6E 0x65    
   \   00000018   0x74 0x69          DC8 74H, 69H, 73H, 5FH, 56H, 33H, 5CH, 6CH
   \              0x73 0x5F    
   \              0x56 0x33    
   \              0x5C 0x6C    
   \   00000020   0x69 0x62          DC8 69H, 62H, 5CH, 4CH, 50H, 4CH, 44H, 5CH
   \              0x5C 0x4C    
   \              0x50 0x4C    
   \              0x44 0x5C    
   \   00000028   0x48 0x57          DC8 48H, 57H, 5CH, 48H, 57H, 5FH, 44H, 4DH
   \              0x5C 0x48    
   \              0x57 0x5F    
   \              0x44 0x4D    
   \   00000030   0x41 0x2E          DC8 41H, 2EH, 63H, 0
   \              0x63 0x00    
    589          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    590          //DMA0 DMA16@@@Handler
    591          void DMA0_IRQHandler(void)
    592          {
    593          #if (UCOS_II > 0u)
    594            OS_CPU_SR  cpu_sr = 0u;
    595            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    596            OSIntEnter();
    597            OS_EXIT_CRITICAL();
    598          #endif  
    599            
    600            if( DMA0->INT & 0x1u<<0)
    601            {
    602              //@@@@@@@@@@@
    603              DMA_ISR[0]();
    604              //@@@@@@@
    605              DMA0->INT |= 0x1u<<0;
    606            }
    607            else if(DMA0->INT & 0x1u<<16)
    608            {
    609              //@@@@@@@@@@@
    610              DMA_ISR[16]();
    611              //@@@@@@@
    612              DMA0->INT |= 0x1u<<16;
    613            }
    614            else
    615            {}
    616            
    617          #if (UCOS_II > 0u)
    618            OSIntExit();          //@@@@@@@@@@@@@@@@@
    619          #endif
    620          }
    621          //DMA1 DMA17@@@Handler
    622          void DMA1_IRQHandler(void)
    623          {
    624          #if (UCOS_II > 0u)
    625            OS_CPU_SR  cpu_sr = 0u;
    626            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    627            OSIntEnter();
    628            OS_EXIT_CRITICAL();
    629          #endif  
    630            
    631            if( DMA0->INT & 0x1u<<1)
    632            {
    633              //@@@@@@@@@@@
    634              DMA_ISR[1]();
    635              //@@@@@@@
    636              DMA0->INT |= 0x1u<<1;
    637            }
    638            else if(DMA0->INT & 0x1u<<17)
    639            {
    640              //@@@@@@@@@@@
    641              DMA_ISR[17]();
    642              //@@@@@@@
    643              DMA0->INT |= 0x1u<<17;
    644            }
    645            else
    646            {}
    647            
    648          #if (UCOS_II > 0u)
    649            OSIntExit();          //@@@@@@@@@@@@@@@@@
    650          #endif
    651          }
    652          //DMA2 DMA18@@@Handler
    653          void DMA2_IRQHandler(void)
    654          {
    655          #if (UCOS_II > 0u)
    656            OS_CPU_SR  cpu_sr = 0u;
    657            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    658            OSIntEnter();
    659            OS_EXIT_CRITICAL();
    660          #endif  
    661            
    662            if( DMA0->INT & 0x1u<<2)
    663            {
    664              //@@@@@@@@@@@
    665              DMA_ISR[2]();
    666              //@@@@@@@
    667              DMA0->INT |= 0x1u<<2;
    668            }
    669            else if(DMA0->INT & 0x1u<<18)
    670            {
    671              //@@@@@@@@@@@
    672              DMA_ISR[18]();
    673              //@@@@@@@
    674              DMA0->INT |= 0x1u<<18;
    675            }
    676            else
    677            {}
    678            
    679          #if (UCOS_II > 0u)
    680            OSIntExit();          //@@@@@@@@@@@@@@@@@
    681          #endif
    682          }
    683          //DMA3 DMA19@@@Handler
    684          void DMA3_IRQHandler(void)
    685          {
    686          #if (UCOS_II > 0u)
    687            OS_CPU_SR  cpu_sr = 0u;
    688            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    689            OSIntEnter();
    690            OS_EXIT_CRITICAL();
    691          #endif  
    692            
    693            if( DMA0->INT & 0x1u<<3)
    694            {
    695              //@@@@@@@@@@@
    696              DMA_ISR[3]();
    697              //@@@@@@@
    698              DMA0->INT |= 0x1u<<3;
    699            }
    700            else if(DMA0->INT & 0x1u<<19)
    701            {
    702              //@@@@@@@@@@@
    703              DMA_ISR[19]();
    704              //@@@@@@@
    705              DMA0->INT |= 0x1u<<19;
    706            }
    707            else
    708            {}
    709            
    710          #if (UCOS_II > 0u)
    711            OSIntExit();          //@@@@@@@@@@@@@@@@@
    712          #endif
    713          }
    714          //DMA4 DMA20@@@Handler
    715          void DMA4_IRQHandler(void)
    716          {
    717          #if (UCOS_II > 0u)
    718            OS_CPU_SR  cpu_sr = 0u;
    719            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    720            OSIntEnter();
    721            OS_EXIT_CRITICAL();
    722          #endif  
    723            
    724            if( DMA0->INT & 0x1u<<4)
    725            {
    726              //@@@@@@@@@@@
    727              DMA_ISR[4]();
    728              //@@@@@@@
    729              DMA0->INT |= 0x1u<<4;
    730            }
    731            else if(DMA0->INT & 0x1u<<20)
    732            {
    733              //@@@@@@@@@@@
    734              DMA_ISR[20]();
    735              //@@@@@@@
    736              DMA0->INT |= 0x1u<<20;
    737            }
    738            else
    739            {}
    740            
    741          #if (UCOS_II > 0u)
    742            OSIntExit();          //@@@@@@@@@@@@@@@@@
    743          #endif
    744          }
    745          //DMA5 DMA21@@@Handler
    746          void DMA5_IRQHandler(void)
    747          {
    748          #if (UCOS_II > 0u)
    749            OS_CPU_SR  cpu_sr = 0u;
    750            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    751            OSIntEnter();
    752            OS_EXIT_CRITICAL();
    753          #endif  
    754            
    755            if( DMA0->INT & 0x1u<<5)
    756            {
    757              //@@@@@@@@@@@
    758              DMA_ISR[5]();
    759              //@@@@@@@
    760              DMA0->INT |= 0x1u<<5;
    761            }
    762            else if(DMA0->INT & 0x1u<<21)
    763            {
    764              //@@@@@@@@@@@
    765              DMA_ISR[21]();
    766              //@@@@@@@
    767              DMA0->INT |= 0x1u<<21;
    768            }
    769            else
    770            {}
    771            
    772          #if (UCOS_II > 0u)
    773            OSIntExit();          //@@@@@@@@@@@@@@@@@
    774          #endif
    775          }
    776          //DMA6 DMA22@@@Handler
    777          void DMA6_IRQHandler(void)
    778          {
    779          #if (UCOS_II > 0u)
    780            OS_CPU_SR  cpu_sr = 0u;
    781            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    782            OSIntEnter();
    783            OS_EXIT_CRITICAL();
    784          #endif  
    785            
    786            if( DMA0->INT & 0x1u<<6)
    787            {
    788              //@@@@@@@@@@@
    789              DMA_ISR[6]();
    790              //@@@@@@@
    791              DMA0->INT |= 0x1u<<6;
    792            }
    793            else if(DMA0->INT & 0x1u<<22)
    794            {
    795              //@@@@@@@@@@@
    796              DMA_ISR[22]();
    797              //@@@@@@@
    798              DMA0->INT |= 0x1u<<22;
    799            }
    800            else
    801            {}
    802            
    803          #if (UCOS_II > 0u)
    804            OSIntExit();          //@@@@@@@@@@@@@@@@@
    805          #endif
    806          }
    807          //DMA7 DMA23@@@Handler
    808          void DMA7_IRQHandler(void)
    809          {
    810          #if (UCOS_II > 0u)
    811            OS_CPU_SR  cpu_sr = 0u;
    812            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    813            OSIntEnter();
    814            OS_EXIT_CRITICAL();
    815          #endif  
    816            
    817            if( DMA0->INT & 0x1u<<7 )
    818            {
    819              //@@@@@@@@@@@
    820              DMA_ISR[7]();
    821              //@@@@@@@
    822              DMA0->INT |= 0x1u<<7;
    823            }
    824            else if( DMA0->INT & 0x1u<<23 )
    825            {
    826              //@@@@@@@@@@@
    827              DMA_ISR[23]();
    828              //@@@@@@@
    829              DMA0->INT |= 0x1u<<23;
    830            }
    831            else
    832            {}
    833            
    834          #if (UCOS_II > 0u)
    835            OSIntExit();          //@@@@@@@@@@@@@@@@@
    836          #endif
    837          }
    838          //DMA8 DMA24@@@Handler
    839          void DMA8_IRQHandler(void)
    840          {
    841          #if (UCOS_II > 0u)
    842            OS_CPU_SR  cpu_sr = 0u;
    843            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    844            OSIntEnter();
    845            OS_EXIT_CRITICAL();
    846          #endif  
    847            
    848            if( DMA0->INT & 0x1u<<8 )
    849            {
    850              //@@@@@@@@@@@
    851              DMA_ISR[8]();
    852              //@@@@@@@
    853              DMA0->INT |= 0x1u<<8;
    854            }
    855            else if( DMA0->INT & 0x1u<<24 )
    856            {
    857              //@@@@@@@@@@@
    858              DMA_ISR[24]();
    859              //@@@@@@@
    860              DMA0->INT |= 0x1u<<24;
    861            }
    862            else
    863            {}
    864            
    865          #if (UCOS_II > 0u)
    866            OSIntExit();          //@@@@@@@@@@@@@@@@@
    867          #endif
    868          }
    869          //DMA9 DMA25@@@Handler
    870          void DMA9_IRQHandler(void)
    871          {
    872          #if (UCOS_II > 0u)
    873            OS_CPU_SR  cpu_sr = 0u;
    874            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    875            OSIntEnter();
    876            OS_EXIT_CRITICAL();
    877          #endif  
    878            
    879            if( DMA0->INT & 0x1u<<9 )
    880            {
    881              //@@@@@@@@@@@
    882              DMA_ISR[9]();
    883              //@@@@@@@
    884              DMA0->INT |= 0x1u<<9;
    885            }
    886            else if( DMA0->INT & 0x1u<<25 )
    887            {
    888              //@@@@@@@@@@@
    889              DMA_ISR[25]();
    890              //@@@@@@@
    891              DMA0->INT |= 0x1u<<25;
    892            }
    893            else
    894            {}
    895            
    896          #if (UCOS_II > 0u)
    897            OSIntExit();          //@@@@@@@@@@@@@@@@@
    898          #endif
    899          }
    900          //DMA10 DMA26@@@Handler
    901          void DMA10_IRQHandler(void)
    902          {
    903          #if (UCOS_II > 0u)
    904            OS_CPU_SR  cpu_sr = 0u;
    905            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    906            OSIntEnter();
    907            OS_EXIT_CRITICAL();
    908          #endif  
    909            
    910            if( DMA0->INT & 0x1u<<10 )
    911            {
    912              //@@@@@@@@@@@
    913              DMA_ISR[10]();
    914              //@@@@@@@
    915              DMA0->INT |= 0x1u<<10;
    916            }
    917            else if( DMA0->INT & 0x1u<<26 )
    918            {
    919              //@@@@@@@@@@@
    920              DMA_ISR[26]();
    921              //@@@@@@@
    922              DMA0->INT |= 0x1u<<26;
    923            }
    924            else
    925            {}
    926            
    927          #if (UCOS_II > 0u)
    928            OSIntExit();          //@@@@@@@@@@@@@@@@@
    929          #endif
    930          }
    931          //DMA11 DMA27@@@Handler
    932          void DMA11_IRQHandler(void)
    933          {
    934          #if (UCOS_II > 0u)
    935            OS_CPU_SR  cpu_sr = 0u;
    936            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    937            OSIntEnter();
    938            OS_EXIT_CRITICAL();
    939          #endif  
    940            
    941            if( DMA0->INT & 0x1u<<11 )
    942            {
    943              //@@@@@@@@@@@
    944              DMA_ISR[11]();
    945              //@@@@@@@
    946              DMA0->INT |= 0x1u<<11;
    947            }
    948            else if( DMA0->INT & 0x1u<<27 )
    949            {
    950              //@@@@@@@@@@@
    951              DMA_ISR[27]();
    952              //@@@@@@@
    953              DMA0->INT |= 0x1u<<27;
    954            }
    955            else
    956            {}  
    957          #if (UCOS_II > 0u)
    958            OSIntExit();          //@@@@@@@@@@@@@@@@@
    959          #endif
    960          }
    961          //DMA12 DMA28@@@Handler
    962          void DMA12_IRQHandler(void)
    963          {
    964          #if (UCOS_II > 0u)
    965            OS_CPU_SR  cpu_sr = 0u;
    966            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    967            OSIntEnter();
    968            OS_EXIT_CRITICAL();
    969          #endif  
    970            
    971            if( DMA0->INT & 0x1u<<12 )
    972            {
    973              //@@@@@@@@@@@
    974              DMA_ISR[12]();
    975              //@@@@@@@
    976              DMA0->INT |= 0x1u<<12;
    977            }
    978            else if( DMA0->INT & 0x1u<<28 )
    979            {
    980              //@@@@@@@@@@@
    981              DMA_ISR[28]();
    982              //@@@@@@@
    983              DMA0->INT |= 0x1u<<28;
    984            }
    985            else
    986            {}  
    987            
    988          #if (UCOS_II > 0u)
    989            OSIntExit();          //@@@@@@@@@@@@@@@@@
    990          #endif
    991          }
    992          //DMA13 DMA29@@@Handler
    993          void DMA13_IRQHandler(void)
    994          {
    995          #if (UCOS_II > 0u)
    996            OS_CPU_SR  cpu_sr = 0u;
    997            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
    998            OSIntEnter();
    999            OS_EXIT_CRITICAL();
   1000          #endif  
   1001            
   1002            if( DMA0->INT & 0x1u<<13 )
   1003            {
   1004              //@@@@@@@@@@@
   1005              DMA_ISR[13]();
   1006              //@@@@@@@
   1007              DMA0->INT |= 0x1u<<13;
   1008            }
   1009            else if( DMA0->INT & 0x1u<<29 )
   1010            {
   1011              //@@@@@@@@@@@
   1012              DMA_ISR[29]();
   1013              //@@@@@@@
   1014              DMA0->INT |= 0x1u<<29;
   1015            }
   1016            else
   1017            {}   
   1018            
   1019          #if (UCOS_II > 0u)
   1020            OSIntExit();          //@@@@@@@@@@@@@@@@@
   1021          #endif
   1022          }
   1023          //DMA14 DMA30@@@Handler
   1024          void DMA14_IRQHandler(void)
   1025          {
   1026          #if (UCOS_II > 0u)
   1027            OS_CPU_SR  cpu_sr = 0u;
   1028            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
   1029            OSIntEnter();
   1030            OS_EXIT_CRITICAL();
   1031          #endif  
   1032            
   1033            if( DMA0->INT & 0x1u<<14 )
   1034            {
   1035              //@@@@@@@@@@@
   1036              DMA_ISR[14]();
   1037              //@@@@@@@
   1038              DMA0->INT |= 0x1u<<14;
   1039            }
   1040            else if( DMA0->INT & 0x1u<<30 )
   1041            {
   1042              //@@@@@@@@@@@
   1043              DMA_ISR[30]();
   1044              //@@@@@@@
   1045              DMA0->INT |= 0x1u<<30;
   1046            }
   1047            else
   1048            {}   
   1049            
   1050          #if (UCOS_II > 0u)
   1051            OSIntExit();          //@@@@@@@@@@@@@@@@@
   1052          #endif
   1053          }
   1054          
   1055          //DMA15 DMA31@@@Handler
   1056          void DMA15_IRQHandler(void)
   1057          {
   1058          #if (UCOS_II > 0u)
   1059            OS_CPU_SR  cpu_sr = 0u;
   1060            OS_ENTER_CRITICAL(); //@@@@@@@@@@@@@@@@@@
   1061            OSIntEnter();
   1062            OS_EXIT_CRITICAL();
   1063          #endif  
   1064            
   1065            if( DMA0->INT & 0x1u<<15 )
   1066            {
   1067              //@@@@@@@@@@@
   1068              DMA_ISR[15]();
   1069              //@@@@@@@
   1070              DMA0->INT |= 0x1u<<15;
   1071            }
   1072            else if( DMA0->INT & 0x1u<<31 )
   1073            {
   1074              //@@@@@@@@@@@
   1075              DMA_ISR[31]();
   1076              //@@@@@@@
   1077              DMA0->INT |= 0x1u<<31;
   1078            }
   1079            else
   1080            {}
   1081            
   1082          #if (UCOS_II > 0u)
   1083            OSIntExit();          //@@@@@@@@@@@@@@@@@
   1084          #endif
   1085          }
   1086          #endif
   1087          
   1088          
   1089          
   1090          
   1091          
   1092          
   1093          
   1094          
   1095          
   1096          
   1097          
   1098          
   1099          
   1100          
   1101          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DMA0_IRQHandler
         8   -- Indirect call
       8   DMA10_IRQHandler
         8   -- Indirect call
       8   DMA11_IRQHandler
         8   -- Indirect call
       8   DMA12_IRQHandler
         8   -- Indirect call
       8   DMA13_IRQHandler
         8   -- Indirect call
       8   DMA14_IRQHandler
         8   -- Indirect call
       8   DMA15_IRQHandler
         8   -- Indirect call
       8   DMA1_IRQHandler
         8   -- Indirect call
       8   DMA2_IRQHandler
         8   -- Indirect call
       8   DMA3_IRQHandler
         8   -- Indirect call
       8   DMA4_IRQHandler
         8   -- Indirect call
       8   DMA5_IRQHandler
         8   -- Indirect call
       8   DMA6_IRQHandler
         8   -- Indirect call
       8   DMA7_IRQHandler
         8   -- Indirect call
       8   DMA8_IRQHandler
         8   -- Indirect call
       8   DMA9_IRQHandler
         8   -- Indirect call
      24   LPLD_DMA_DisableIrq
        24   -> __NVIC_DisableIRQ
      24   LPLD_DMA_EnableIrq
        24   -> __NVIC_EnableIRQ
      72   LPLD_DMA_Init
        72   -> assert_failed
      16   LPLD_DMA_SoftwareStartService
       0   __NVIC_DisableIRQ
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_2
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
      52  ?_0
      22  DMA0_IRQHandler
      22  DMA10_IRQHandler
      22  DMA11_IRQHandler
      22  DMA12_IRQHandler
      22  DMA13_IRQHandler
      22  DMA14_IRQHandler
      22  DMA15_IRQHandler
      22  DMA1_IRQHandler
      22  DMA2_IRQHandler
      22  DMA3_IRQHandler
      22  DMA4_IRQHandler
      22  DMA5_IRQHandler
      22  DMA6_IRQHandler
      22  DMA7_IRQHandler
      22  DMA8_IRQHandler
      22  DMA9_IRQHandler
      64  DMA_ISR
      22  LPLD_DMA_DisableIrq
      22  LPLD_DMA_EnableIrq
     756  LPLD_DMA_Init
      34  LPLD_DMA_SoftwareStartService
      30  __NVIC_DisableIRQ
      30  __NVIC_EnableIRQ

 
    64 bytes in section .bss
    52 bytes in section .rodata
 1 286 bytes in section .text
 
 1 286 bytes of CODE  memory
    52 bytes of CONST memory
    64 bytes of DATA  memory

Errors: none
Warnings: 1
